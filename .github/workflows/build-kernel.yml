name: A编译内核

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      # 内核版本选择
      main_kernel_choice:
        description: "选择主要编译的内核版本 (默认 A14 6.1)。若要编译多个或此处未列出, 可在下方额外列表指定, 并选'none'或您要的主要内核。"
        required: true
        type: choice
        options:
          - 'a14_61' # 默认选项
          - 'a12_510'
          - 'a13_510'
          - 'a13_515'
          - 'a14_515'
          - 'a15_66'
          - 'none' # 如果只想使用额外列表
        default: 'a14_61'
      additional_kernels_list:
        description: "额外编译的内核列表, 用逗号分隔 (例如: a12_510,a15_66)。此列表会与上方选择合并。"
        required: false
        type: string
        default: ''

      # KernelSU 选项
      kernelsu_variant:
        description: "选择 KernelSU 变体"
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
          - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: "选择 KSU 分支"
        required: true
        type: choice
        options:
          - Stable(标准)
          - Dev(开发)
          - Other(其他/指定)
        default: Dev(开发)

      # 自定义选项
      version:
        description: '自定义内核版本后缀 (留空则随机生成, 应用于所有选定内核)'
        required: false
        type: string
      use_zram:
        description: '是否开启增加更多ZRAM算法?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: '是否开启KPM功能?'
        required: true
        type: boolean
        default: true

jobs:
  # --- 准备所有可能的版本号 (保持不变) ---
  prepare_versions:
    name: 准备版本号
    runs-on: ubuntu-latest
    outputs:
      version_a12_510: ${{ steps.generate.outputs.version_a12_510 }}
      version_a13_510: ${{ steps.generate.outputs.version_a13_510 }}
      version_a13_515: ${{ steps.generate.outputs.version_a13_515 }}
      version_a14_515: ${{ steps.generate.outputs.version_a14_515 }}
      version_a14_61: ${{ steps.generate.outputs.version_a14_61 }}
      version_a15_66: ${{ steps.generate.outputs.version_a15_66 }}
    steps:
      - name: 生成所有可能的版本字符串
        id: generate
        env:
          USER_PROVIDED_VERSION: ${{ github.event.inputs.version }}
        run: |
          generate_version() {
            local fixed_part="$1"
            local version_name="$2"
            local version_to_use=""
            if [[ -n "$USER_PROVIDED_VERSION" ]]; then
              version_to_use="$USER_PROVIDED_VERSION"
            else
              local prefix1="gd"; local prefix2="ab"
              local random_hex=$(head /dev/urandom | LC_ALL=C tr -dc 'a-f0-9' | head -c 11 || true)
              local random_digits=$(head /dev/urandom | LC_ALL=C tr -dc '0-9' | head -c 8 || true)
              version_to_use="${fixed_part}-${prefix1}${random_hex}-${prefix2}${random_digits}"
            fi
            echo "${version_name}=${version_to_use}" >> "$GITHUB_OUTPUT"
          }
          generate_version "-android12-9" "version_a12_510"
          generate_version "-android13-9" "version_a13_510"
          generate_version "-android13-8" "version_a13_515"
          generate_version "-android14-5.15" "version_a14_515"
          generate_version "-android14-11" "version_a14_61"
          generate_version "-android15-8" "version_a15_66"

  # --- 准备最终要编译的内核列表 ---
  prepare_kernel_selection:
    name: 准备内核编译列表
    runs-on: ubuntu-latest
    outputs:
      selected_kernels_string: ${{ steps.construct_list.outputs.kernels_csv }}
    steps:
      - name: 合并主要选择和额外列表
        id: construct_list
        shell: bash
        run: |
          main_choice="${{ github.event.inputs.main_kernel_choice }}"
          additional_list="${{ github.event.inputs.additional_kernels_list }}"
          
          declare -A kernels_to_build_set # 使用关联数组去重
          
          # 添加主要选择 (如果不是 'none')
          if [[ "$main_choice" != "none" && -n "$main_choice" ]]; then
            kernels_to_build_set["$main_choice"]=1
          fi
          
          # 添加额外列表中的内核
          # 去除空格并将逗号替换为空格，以便迭代
          cleaned_additional_list=$(echo "$additional_list" | tr -d ' ' | sed 's/,/ /g')
          for kernel_id in $cleaned_additional_list; do
            if [[ -n "$kernel_id" ]]; then # 确保不添加空字符串
              kernels_to_build_set["$kernel_id"]=1
            fi
          done
          
          # 将集合转换为逗号分隔的字符串
          final_kernels_csv=""
          for k in "${!kernels_to_build_set[@]}"; do
            if [[ -z "$final_kernels_csv" ]]; then
              final_kernels_csv="$k"
            else
              final_kernels_csv="$final_kernels_csv,$k"
            fi
          done
          
          echo "最终待编译内核列表: $final_kernels_csv"
          echo "kernels_csv=$final_kernels_csv" >> "$GITHUB_OUTPUT"

  # --- 调试输入的作业 ---
  debug_inputs:
    name: 调试输入和选择
    runs-on: ubuntu-latest
    needs: [prepare_versions, prepare_kernel_selection] # 依赖新的准备作业
    steps:
      - name: 打印输入值和最终选择
        run: |
          echo "Input main_kernel_choice: '${{ github.event.inputs.main_kernel_choice }}'"
          echo "Input additional_kernels_list: '${{ github.event.inputs.additional_kernels_list }}'"
          echo "Input kernelsu_variant: '${{ github.event.inputs.kernelsu_variant }}'"
          echo "Input kernelsu_branch: '${{ github.event.inputs.kernelsu_branch }}'"
          echo "Input version (custom suffix): '${{ github.event.inputs.version }}'"
          echo "Input use_zram: '${{ github.event.inputs.use_zram }}'"
          echo "Input use_kpm: '${{ github.event.inputs.use_kpm }}'"
          echo "Final selected kernels string: '${{ needs.prepare_kernel_selection.outputs.selected_kernels_string }}'"

  # --- 调用内核编译工作流 ---
  # 每个构建作业现在依赖 prepare_versions 和 prepare_kernel_selection
  # 并使用 contains 函数检查 selected_kernels_string
  build_a12_510:
    name: Build Kernel A12 5.10
    needs: [prepare_versions, prepare_kernel_selection, debug_inputs] # debug_inputs 是可选的依赖
    if: contains(needs.prepare_kernel_selection.outputs.selected_kernels_string, 'a12_510')
    uses: ./.github/workflows/kernel-a12-5.10.yml
    secrets: inherit
    with:
      make_release: false
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ needs.prepare_versions.outputs.version_a12_510 }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}

  build_a13_510:
    name: Build Kernel A13 5.10
    needs: [prepare_versions, prepare_kernel_selection, debug_inputs]
    if: contains(needs.prepare_kernel_selection.outputs.selected_kernels_string, 'a13_510')
    uses: ./.github/workflows/kernel-a13-5.10.yml
    secrets: inherit
    with:
      make_release: false
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ needs.prepare_versions.outputs.version_a13_510 }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}

  build_a13_515:
    name: Build Kernel A13 5.15
    needs: [prepare_versions, prepare_kernel_selection, debug_inputs]
    if: contains(needs.prepare_kernel_selection.outputs.selected_kernels_string, 'a13_515')
    uses: ./.github/workflows/kernel-a13-5.15.yml
    secrets: inherit
    with:
      make_release: false
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ needs.prepare_versions.outputs.version_a13_515 }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}

  build_a14_515:
    name: Build Kernel A14 5.15
    needs: [prepare_versions, prepare_kernel_selection, debug_inputs]
    if: contains(needs.prepare_kernel_selection.outputs.selected_kernels_string, 'a14_515')
    uses: ./.github/workflows/kernel-a14-5.15.yml
    secrets: inherit
    with:
      make_release: false
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ needs.prepare_versions.outputs.version_a14_515 }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}

  build_a14_61:
    name: Build Kernel A14 6.1
    needs: [prepare_versions, prepare_kernel_selection, debug_inputs]
    if: contains(needs.prepare_kernel_selection.outputs.selected_kernels_string, 'a14_61')
    uses: ./.github/workflows/kernel-a14-6.1.yml
    secrets: inherit
    with:
      make_release: false
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ needs.prepare_versions.outputs.version_a14_61 }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}

  build_a15_66:
    name: Build Kernel A15 6.6
    needs: [prepare_versions, prepare_kernel_selection, debug_inputs]
    if: contains(needs.prepare_kernel_selection.outputs.selected_kernels_string, 'a15_66')
    uses: ./.github/workflows/kernel-a15-6.6.yml
    secrets: inherit
    with:
      make_release: false
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      version: ${{ needs.prepare_versions.outputs.version_a15_66 }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}