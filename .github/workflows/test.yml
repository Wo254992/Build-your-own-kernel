name: 内核构建流程

permissions:
  contents: read 

concurrency:
  group: kernel-build-${{ github.ref }}-${{ github.event.inputs.kernel_to_build }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      kernel_to_build:
        description: "选择内核版本"
        required: true
        type: choice
        options:
          - "android12_5.10_168_2023-04_r9"
          - "android12_5.10_198_2024-01_r17"
          - "android12_5.10_205_2024-03_r9"
          - "android12_5.10_209_2024-05_r13"
          - "android12_5.10_218_2024-08_r14"
          - "android12_5.10_226_2024-11_r8"
          - "android12_5.10_233_2025-02_r1"
          - "android12_5.10_X_lts_r1"
          - "android13_5.10_198_2024-01_"
          - "android13_5.10_205_2024-03_"
          - "android13_5.10_209_2024-05_"
          - "android13_5.10_214_2024-07_"
          - "android13_5.10_218_2024-08_"
          - "android13_5.10_223_2024-11_"
          - "android13_5.10_228_2025-01_"
          - "android13_5.10_X_lts_"
          - "android13_5.15_123_2023-11_"
          - "android13_5.15_137_2024-01_"
          - "android13_5.15_144_2024-03_"
          - "android13_5.15_148_2024-05_"
          - "android13_5.15_151_2024-08_"
          - "android13_5.15_167_2024-11_"
          - "android13_5.15_170_2025-01_"
          - "android13_5.15_X_lts_"
          - "android14_5.15_131_2023-11_"
          - "android14_5.15_137_2024-01_"
          - "android14_5.15_144_2024-03_"
          - "android14_5.15_148_2024-05_"
          - "android14_5.15_149_2024-06_"
          - "android14_5.15_153_2024-07_"
          - "android14_5.15_158_2024-08_"
          - "android14_5.15_167_2024-11_"
          - "android14_5.15_170_2025-01_"
          - "android14_6.1_75_2024-05_"
          - "android15_6.6_50_2024-10_"
          - "android15_6.6_56_2024-11_"
          - "android15_6.6_57_2024-12_"
          - "android15_6.6_58_2025-01_"
          - "android15_6.6_66_2025-02_"
          - "android15_6.6_77_2025-03_"
          - "android15_6.6_X_lts_"
        default: "android14_6.1_75_2024-05_"
      kernelsu_branch:
        description: "选择SukiSU功能分支"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Dev
      custom_version_suffix:
        description: '自定义内核版本后缀 (留空则按GKI风格随机生成)'
        required: false
        type: string
      use_zram:
        description: '启用额外ZRAM算法'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: '启用KPM功能'
        required: true
        type: boolean
        default: true
      upload_to_release:
        description: '是否上传到 GitHub Release'
        required: true
        type: choice
        options:
          - 'true'
          - 'false'
        default: 'true'

jobs:
  version_probe:
    name: SukiSU版本探测
    runs-on: ubuntu-latest
    outputs:
      job_name_suffix: ${{ steps.calculate_version.outputs.job_suffix }}
      sukisu_version: ${{ steps.calculate_version.outputs.suki_version_actual }}
    steps:
      - name: 安装Git
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends git
      - name: 计算SukiSU版本号
        id: calculate_version
        shell: bash
        run: |
          set -euo pipefail
          suki_version_actual_for_output="获取失败"
          job_suffix_text=""
          SUKI_REPO_URL="https://github.com/ShirkNeko/SukiSU-Ultra.git"
          CLONE_BRANCH="main"
          echo "Attempting to clone SukiSU from $SUKI_REPO_URL branch $CLONE_BRANCH..."
          if git clone --branch "$CLONE_BRANCH" --single-branch "$SUKI_REPO_URL" SukiSU_temp_for_version; then
            cd SukiSU_temp_for_version
            commit_count=$(git rev-list --count HEAD 2>/dev/null || echo "err_count")
            if [[ "$commit_count" != "err_count" && "$commit_count" =~ ^[0-9]+$ ]]; then
              calculated_version=$((commit_count + 10606))
              suki_version_actual_for_output=$calculated_version
              job_suffix_text=" (SukiSU $calculated_version)"
            else
              suki_version_actual_for_output="计算错误"
              job_suffix_text=" (SukiSU - 版本计算失败)"
              echo "::warning::Failed to calculate SukiSU commit count. Git count output: $commit_count"
            fi
            cd .. && rm -rf SukiSU_temp_for_version
          else
            suki_version_actual_for_output="克隆错误"
            job_suffix_text=" (SukiSU - 克隆失败)"
            echo "::error::Failed to clone SukiSU repository."
          fi
          echo "job_suffix=${job_suffix_text}" >> $GITHUB_OUTPUT
          echo "suki_version_actual=${suki_version_actual_for_output}" >> $GITHUB_OUTPUT

  kernel_build_core:
    name: 内核构建核心 - ${{ github.event.inputs.kernel_to_build }}${{ needs.version_probe.outputs.job_name_suffix }}
    needs: version_probe
    runs-on: ubuntu-latest
    outputs:
      artifact_name_for_release: ${{ steps.prepare_release_outputs.outputs.artifact_name_for_release }}
      release_tag: ${{ steps.prepare_release_outputs.outputs.release_tag_name }}
      release_title: ${{ steps.prepare_release_outputs.outputs.release_title_name }}
      final_kernel_local_version_output: ${{ steps.generate_version_elements.outputs.final_kernel_local_version_for_body }}
      current_build_date_formatted_output: ${{ steps.generate_version_elements.outputs.current_build_date_formatted_for_body }}
      parsed_kernel_version_output: ${{ steps.parse_kernel.outputs.parsed_kernel_version }}
      parsed_sub_level_output: ${{ steps.parse_kernel.outputs.parsed_sub_level }}
      sukisu_version_from_build_job: ${{ needs.version_probe.outputs.sukisu_version }}
      gki_defconfig_path_output: ${{ steps.set_core_paths.outputs.gki_defconfig_path_output }}
      effective_kpm_setting: ${{ steps.kpm_settings.outputs.effective_kpm_value }}
    env:
      CCACHE_COMPILERCHECK: '%compiler% -dumpmachine; %compiler% -dumpversion'
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      SUKI_VERSION_NUM_FROM_PREVIOUS_JOB: ${{ needs.version_probe.outputs.sukisu_version }}
      CCACHE_LOGFILE: /tmp/ccache.log
      BAZEL_PROFILE_FILENAME: bazel_profile.json 
      DEBIAN_FRONTEND: noninteractive
      INTERMEDIATE_ARTIFACT_NAME: "AnyKernel3_Content_For_Release" 

    steps:
      - name: 参数校验
        run: |
          set -euo pipefail
          kernel_input="${{ github.event.inputs.kernel_to_build }}"
          if [[ -z "$kernel_input" ]]; then
            echo "::error::'kernel_to_build' input is empty."
            exit 1
          fi
          echo "Input 'kernel_to_build': $kernel_input - basic validation passed."

      - name: 内核参数解析
        id: parse_kernel
        run: |
          set -euo pipefail
          IFS='_' read -r av kv sl opl rev_raw <<< "${{ github.event.inputs.kernel_to_build }}"
          echo "SELECTED_ANDROID_VERSION=$av" >> $GITHUB_ENV
          echo "SELECTED_KERNEL_VERSION=$kv" >> $GITHUB_ENV
          echo "SELECTED_SUB_LEVEL=$sl" >> $GITHUB_ENV
          echo "SELECTED_OS_PATCH_LEVEL=$opl" >> $GITHUB_ENV
          rev="${rev_raw:-}"
          echo "SELECTED_REVISION=$rev" >> $GITHUB_ENV
          echo "parsed_kernel_version=$kv" >> $GITHUB_OUTPUT
          echo "parsed_sub_level=$sl" >> $GITHUB_OUTPUT
          echo "Parsed kernel parameters: AV=$av, KV=$kv, SL=$sl, OPL=$opl, REV=$rev"

      - name: 路径与配置设定
        id: set_core_paths
        run: |
          set -euo pipefail
          CONFIG_DIR_NAME_VALUE="${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}"
          echo "CONFIG=${CONFIG_DIR_NAME_VALUE}" >> $GITHUB_ENV
          KERNEL_SOURCE_DIRECTORY_VALUE="${GITHUB_WORKSPACE}/${CONFIG_DIR_NAME_VALUE}"
          echo "KERNEL_SRC_ROOT=${KERNEL_SOURCE_DIRECTORY_VALUE}" >> $GITHUB_ENV
          GKI_DEFCONFIG_FILE_PATH_VALUE="${KERNEL_SOURCE_DIRECTORY_VALUE}/common/arch/arm64/configs/gki_defconfig"
          echo "GKI_DEFCONFIG_PATH_ENV=${GKI_DEFCONFIG_FILE_PATH_VALUE}" >> $GITHUB_ENV
          echo "gki_defconfig_path_output=${GKI_DEFCONFIG_FILE_PATH_VALUE}" >> $GITHUB_OUTPUT
          echo "Set KERNEL_SRC_ROOT env var to: ${KERNEL_SOURCE_DIRECTORY_VALUE}"

      - name: 版本要素生成
        id: generate_version_elements
        env:
          USER_PROVIDED_CUSTOM_SUFFIX: ${{ github.event.inputs.custom_version_suffix }}
          SELECTED_AV_ENV: ${{ env.SELECTED_ANDROID_VERSION }}
          SELECTED_KV_ENV: ${{ env.SELECTED_KERNEL_VERSION }}
        run: |
          set -euo pipefail
          _actual_localversion_for_kernel=""
          _artifact_naming_suffix_for_prepare_step="" 
          _current_date_yyyymmdd=$(date +%Y%m%d)
          _current_date_formatted_for_body=$(date +"%Y年%m月%d日")

          if [[ -n "$USER_PROVIDED_CUSTOM_SUFFIX" ]]; then
            _actual_localversion_for_kernel="-$USER_PROVIDED_CUSTOM_SUFFIX" 
            _artifact_naming_suffix_for_prepare_step="$USER_PROVIDED_CUSTOM_SUFFIX" 
            echo "版本要素: 用户自定义后缀为 '$_actual_localversion_for_kernel' (用于内核) 和 '$_artifact_naming_suffix_for_prepare_step' (用于Release文件名)"
          else
            _kernel_fixed_part=""
            if [ "$SELECTED_AV_ENV" == "android12" ] && [ "$SELECTED_KV_ENV" == "5.10" ]; then _kernel_fixed_part="-android12-9"
            elif [ "$SELECTED_AV_ENV" == "android13" ] && [ "$SELECTED_KV_ENV" == "5.10" ]; then _kernel_fixed_part="-android13-9"
            elif [ "$SELECTED_AV_ENV" == "android13" ] && [ "$SELECTED_KV_ENV" == "5.15" ]; then _kernel_fixed_part="-android13-8"
            elif [ "$SELECTED_AV_ENV" == "android14" ] && [ "$SELECTED_KV_ENV" == "6.1" ]; then _kernel_fixed_part="-android14-11"
            elif [ "$SELECTED_AV_ENV" == "android15" ] && [ "$SELECTED_KV_ENV" == "6.6" ]; then _kernel_fixed_part="-android15-8"
            else _kernel_fixed_part="-${SELECTED_AV_ENV}-${SELECTED_KV_ENV//./_}-custom"; fi
            
            _random_hex_11=$(head /dev/urandom | LC_ALL=C tr -dc 'a-f0-9' | head -c 11 || echo "randhex")
            _random_digits_8=$(head /dev/urandom | LC_ALL=C tr -dc '0-9' | head -c 8 || echo "randdig")
            _actual_localversion_for_kernel="${_kernel_fixed_part}-gd${_random_hex_11}-ab${_random_digits_8}" 
            _artifact_naming_suffix_for_prepare_step="-${_current_date_yyyymmdd}" 
            echo "版本要素: 无自定义后缀。内核 LOCALVERSION 后缀: '$_actual_localversion_for_kernel', Artifact 命名后缀: '$_artifact_naming_suffix_for_prepare_step'"
          fi
          
          echo "FINAL_KERNEL_LOCAL_VERSION=${_actual_localversion_for_kernel}" >> "$GITHUB_ENV"
          echo "ARTIFACT_NAME_SUFFIX_PART_ENV=${_artifact_naming_suffix_for_prepare_step}" >> "$GITHUB_ENV" 
          echo "final_kernel_local_version_for_body=${_actual_localversion_for_kernel}" >> "$GITHUB_OUTPUT"
          echo "current_build_date_formatted_for_body=${_current_date_formatted_for_body}" >> "$GITHUB_OUTPUT"
          echo "artifact_naming_suffix_for_prepare=${_artifact_naming_suffix_for_prepare_step}" >> "$GITHUB_OUTPUT"


      - name: KPM策略调整
        id: kpm_settings
        run: |
          set -euo pipefail
          EFFECTIVE_KPM_VALUE=""
          if [[ "${{ env.SELECTED_ANDROID_VERSION }}" == "android15" && "${{ env.SELECTED_KERNEL_VERSION }}" == "6.6" ]]; then
            EFFECTIVE_KPM_VALUE="false"
            echo "KPM is forced to 'false' for Android 15 with Kernel 6.6."
          else
            EFFECTIVE_KPM_VALUE="${{ github.event.inputs.use_kpm }}"
            echo "KPM setting based on user input: $EFFECTIVE_KPM_VALUE"
          fi
          echo "EFFECTIVE_USE_KPM=${EFFECTIVE_KPM_VALUE}" >> $GITHUB_ENV
          echo "effective_kpm_value=${EFFECTIVE_KPM_VALUE}" >> $GITHUB_OUTPUT

      - name: 构建空间优化
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: 构建依赖部署
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get upgrade -y 
          sudo apt-get install -yq --no-install-recommends ccache python3 git curl time libssl-dev flex

      - name: 编译缓存配置
        run: |
          set -euo pipefail
          mkdir -p ~/.cache/bazel 
          ccache --version
          ccache --max-size=2G 
          ccache --set-config=compression=true 
          if ccache --version | grep -q 'Zstd'; then
            ccache --set-config=compression_type=zstd
            echo "ccache: Zstd compression enabled."
          fi
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -s

      - name: 编译缓存恢复
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}-ccache-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}-ccache-${{ github.ref_name }}-
            ${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_SUB_LEVEL }}-ccache-

      - name: 工具链缓存
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1 

      - name: 工具链下载
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          AOSP_MIRROR=https://android.googlesource.com
          BUILD_TOOLS_BRANCH=main-kernel-build-2024 
          MKBOOTIMG_BRANCH=main 
          echo "Downloading prebuilt toolchain..."
          git clone "$AOSP_MIRROR/kernel/prebuilts/build-tools" -b "$BUILD_TOOLS_BRANCH" --depth 1 kernel-build-tools
          git clone "$AOSP_MIRROR/platform/system/tools/mkbootimg" -b "$MKBOOTIMG_BRANCH" --depth 1 mkbootimg

      - name: 工具链路径设定
        run: |
          set -euo pipefail
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: 签名密钥配置
        run: |
          set -euo pipefail
          KEY_DIR="$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb"
          mkdir -p "$KEY_DIR"
          echo "Generating a test signing key."
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > "$KEY_DIR/testkey_rsa2048.pem"
          echo "BOOT_SIGN_KEY_PATH=$KEY_DIR/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "Test signing key generated and path set."
          
      - name: Repo工具部署
        run: |
          set -euo pipefail
          mkdir -p ./git-repo
          curl -sS https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: 依赖项审查
        uses: actions/dependency-review-action@v4
        with:
          base-ref: ${{ github.sha }}~1
          head-ref: ${{ github.sha }}
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, GPL-2.0, BSD-3-Clause
          warn-only: true

      - name: 依赖仓库克隆
        run: |
          set -euo pipefail
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH_SPECIFIC="gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}"
          SUSFS_BRANCH_FALLBACK="main" 
          echo "Cloning dependency repositories..."
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH" AnyKernel3
          echo "Attempting to clone susfs4ksu with branch: $SUSFS_BRANCH_SPECIFIC..."
          if ! git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH_SPECIFIC" susfs4ksu; then
            echo "Failed to clone susfs4ksu with branch $SUSFS_BRANCH_SPECIFIC, trying fallback: $SUSFS_BRANCH_FALLBACK"
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH_FALLBACK" susfs4ksu
          fi
          git clone https://github.com/WildPlusKernel/kernel_patches.git kernel_patches
          git clone https://github.com/ShirkNeko/SukiSU_patch.git SukiSU_patch

      - name: 内核源码同步
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: |
            set -euo pipefail
            mkdir -p "${{ env.KERNEL_SRC_ROOT }}"
            cd "${{ env.KERNEL_SRC_ROOT }}"
            
            _MANIFEST_BRANCH_FOR_INIT="common-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}"
            if [[ -n "${{ env.SELECTED_OS_PATCH_LEVEL }}" && "${{ env.SELECTED_OS_PATCH_LEVEL }}" != "_" && "${{ env.SELECTED_OS_PATCH_LEVEL }}" != "X" ]]; then
                _MANIFEST_BRANCH_FOR_INIT="${_MANIFEST_BRANCH_FOR_INIT}-${{ env.SELECTED_OS_PATCH_LEVEL }}"
            elif [[ "${{ github.event.inputs.kernel_to_build }}" == *"_X_lts_"* || "${{ github.event.inputs.kernel_to_build }}" == *"_lts_"* ]]; then
                _MANIFEST_BRANCH_FOR_INIT="${_MANIFEST_BRANCH_FOR_INIT}}-lts"
            fi
            echo "Using manifest branch: $_MANIFEST_BRANCH_FOR_INIT"
            ${{ env.REPO }} init --depth=1 -u https://android.googlesource.com/kernel/manifest -b "$_MANIFEST_BRANCH_FOR_INIT" --repo-rev=v2.16

            DEFAULT_MANIFEST_PATH=".repo/manifests/default.xml"
            if [ ! -f "$DEFAULT_MANIFEST_PATH" ] && [ -f .repo/manifest.xml ]; then
              DEFAULT_MANIFEST_PATH=.repo/manifest.xml
            fi
            
            COMMON_PROJECT_REVISION_IN_MANIFEST=$(grep 'project path="common"' "$DEFAULT_MANIFEST_PATH" | sed -n 's/.*revision="\([^"]*\)".*/\1/p' | head -n 1)
            if [ -z "$COMMON_PROJECT_REVISION_IN_MANIFEST" ]; then
                COMMON_PROJECT_REVISION_IN_MANIFEST=$(grep 'project path="kernel/common"' "$DEFAULT_MANIFEST_PATH" | sed -n 's/.*revision="\([^"]*\)".*/\1/p' | head -n 1)
                if [ -z "$COMMON_PROJECT_REVISION_IN_MANIFEST" ]; then 
                  COMMON_PROJECT_REVISION_IN_MANIFEST=$(echo "$_MANIFEST_BRANCH_FOR_INIT" | sed 's/^common-//')
                fi
            fi
            REMOTE_COMMON_BRANCH_STATUS=$(git ls-remote https://android.googlesource.com/kernel/common "$COMMON_PROJECT_REVISION_IN_MANIFEST")
            if echo "$REMOTE_COMMON_BRANCH_STATUS" | grep -q "refs/heads/deprecated/$COMMON_PROJECT_REVISION_IN_MANIFEST"; then
              echo "Adjusting manifest for deprecated common branch: $COMMON_PROJECT_REVISION_IN_MANIFEST"
              sed -i "/project path=\"common\"/s|revision=\"$COMMON_PROJECT_REVISION_IN_MANIFEST\"|revision=\"deprecated/$COMMON_PROJECT_REVISION_IN_MANIFEST\"|" "$DEFAULT_MANIFEST_PATH" || \
              sed -i "/project path=\"kernel\/common\"/s|revision=\"$COMMON_PROJECT_REVISION_IN_MANIFEST\"|revision=\"deprecated/$COMMON_PROJECT_REVISION_IN_MANIFEST\"|" "$DEFAULT_MANIFEST_PATH"
            fi
            
            ${{ env.REPO }} --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: SukiSU分支设定
        run: |
          set -euo pipefail
          KSU_SETUP_BRANCH_ARG_INTERNAL="" 
          if [[ "${{ github.event.inputs.kernelsu_branch }}" == "Dev" ]]; then
            KSU_SETUP_BRANCH_ARG_INTERNAL="susfs-dev" 
            echo "SukiSU branch: Dev (requesting 'susfs-dev' branch directly)"
          elif [[ "${{ github.event.inputs.kernelsu_branch }}" == "Stable" ]]; then
            KSU_SETUP_BRANCH_ARG_INTERNAL="" 
            echo "SukiSU branch: Stable (setup.sh default)"
          else 
            KSU_SETUP_BRANCH_ARG_INTERNAL=""
            echo "SukiSU branch: Other (setup.sh default)"
          fi
          echo "KSU_BRANCH_ARG=${KSU_SETUP_BRANCH_ARG_INTERNAL}" >> $GITHUB_ENV

      - name: SukiSU核心集成
        run: |
          set -euo pipefail
          cd "${{ env.KERNEL_SRC_ROOT }}"
          echo "Integrating SukiSU with args: '${{ env.KSU_BRANCH_ARG }}'"
          if [[ -n "${{ env.KSU_BRANCH_ARG }}" ]]; then
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s -- ${{ env.KSU_BRANCH_ARG }}
          else
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash
          fi
          echo "SukiSU integration script executed."

      - name: SukiSU版本记录
        shell: bash
        run: |
          set -euo pipefail
          final_suki_version_num_for_env="${{ needs.version_probe.outputs.sukisu_version }}"
          if [[ "$final_suki_version_num_for_env" =~ ^[0-9]+$ ]]; then
            echo "SUKI_VERSION_NUM=$final_suki_version_num_for_env" >> $GITHUB_ENV
            echo "SukiSU version number set to: $final_suki_version_num_for_env"
          else
            echo "SUKI_VERSION_NUM=NoVer" >> $GITHUB_ENV
            echo "::warning::Invalid SukiSU version ('$final_suki_version_num_for_env'). Using 'NoVer'."
          fi

      - name: SUSFS特性增强
        working-directory: ${{ env.KERNEL_SRC_ROOT }} 
        shell: bash
        run: |
          echo "[SUSFS Diag] Applying SUSFS patches from susfs4ksu..."
          mkdir -p ./common/fs && mkdir -p ./common/include/linux
          SUSFS_PATCH_SRC_FILE_PATH="${GITHUB_WORKSPACE}/susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}.patch"
          SUSFS_PATCH_DEST_DIR_PATH="./common/"
          if [ -f "$SUSFS_PATCH_SRC_FILE_PATH" ]; then
            echo "[SUSFS Diag] Copying SUSFS patch file: $SUSFS_PATCH_SRC_FILE_PATH to $SUSFS_PATCH_DEST_DIR_PATH"
            cp "$SUSFS_PATCH_SRC_FILE_PATH" "$SUSFS_PATCH_DEST_DIR_PATH" || true 
          else
            echo "::warning::[SUSFS Diag] Main SUSFS patch file not found: $SUSFS_PATCH_SRC_FILE_PATH."
          fi
          SUSFS_FS_SRC_PATH="${GITHUB_WORKSPACE}/susfs4ksu/kernel_patches/fs"
          SUSFS_FS_DEST_PATH="./common/fs/"
          if [ -d "$SUSFS_FS_SRC_PATH" ]; then
            if [ -n "$(ls -A "$SUSFS_FS_SRC_PATH" 2>/dev/null)" ]; then
              cp -r ${SUSFS_FS_SRC_PATH}/* "$SUSFS_FS_DEST_PATH" || true
            fi
          fi
          SUSFS_INCLUDE_SRC_PATH="${GITHUB_WORKSPACE}/susfs4ksu/kernel_patches/include/linux"
          SUSFS_INCLUDE_DEST_PATH="./common/include/linux/"
          if [ -d "$SUSFS_INCLUDE_SRC_PATH" ]; then
            if [ -n "$(ls -A "$SUSFS_INCLUDE_SRC_PATH" 2>/dev/null)" ]; then
              cp -r ${SUSFS_INCLUDE_SRC_PATH}/* "$SUSFS_INCLUDE_DEST_PATH" || true
            fi
          fi
          current_dir_before_cd_common=$(pwd)
          if ! cd ./common; then
            echo "::error::[SUSFS Diag] Failed to cd into ./common for patching."
          else
            SUSFS_PATCH_FILENAME_IN_COMMON="50_add_susfs_in_gki-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}.patch"
            if [ -f "./${SUSFS_PATCH_FILENAME_IN_COMMON}" ]; then
              echo "[SUSFS Diag] Attempting to apply patch: ./${SUSFS_PATCH_FILENAME_IN_COMMON}"
              patch_output_file=$(mktemp)
              patch -p1 --fuzz=3 < "./${SUSFS_PATCH_FILENAME_IN_COMMON}" > "$patch_output_file" 2>&1 || true
              echo "--- [SUSFS Diag] Main Patch Output ---"
              cat "$patch_output_file" || echo "[SUSFS Diag] No patch output for main patch."
              rm -f "$patch_output_file"
              echo "--- [SUSFS Diag] Main Patch Output End ---"
            fi
            FORMATTED_BRANCH_FOR_FIX_COMPARE="${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ env.SELECTED_OS_PATCH_LEVEL }}"
            if [[ "$FORMATTED_BRANCH_FOR_FIX_COMPARE" == "android15-6.6-2024-08" || "$FORMATTED_BRANCH_FOR_FIX_COMPARE" == "android15-6.6-2024-09" ]]; then
              curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/fix/fix6.6.patch -o fix6.6.patch
              patch_output_file_66=$(mktemp)
              patch -p1 < fix6.6.patch > "$patch_output_file_66" 2>&1 || true
              cat "$patch_output_file_66" || true
              rm -f "$patch_output_file_66"
            fi
            cd "$current_dir_before_cd_common" || echo "::warning::[SUSFS Diag] Failed to cd back from ./common."
          fi
          echo "[SUSFS Diag] SUSFS patching finished."

      - name: 附加特性补丁
        shell: bash
        run: |
          set -euo pipefail 
          COMMON_DIR_PATH="${{ env.KERNEL_SRC_ROOT }}/common"

          echo "Applying SukiSU hooks patch..."
          cd "$COMMON_DIR_PATH" || { echo "::error::Failed to cd to $COMMON_DIR_PATH for hooks patch"; exit 1; }
          HOOKS_PATCH_FILE="${GITHUB_WORKSPACE}/SukiSU_patch/hooks/syscall_hooks.patch"
          if [ -f "$HOOKS_PATCH_FILE" ]; then
            cp "$HOOKS_PATCH_FILE" ./syscall_hooks.patch
            patch -p1 -F 3 < syscall_hooks.patch || echo "::warning::SukiSU hooks patch failed or applied with fuzz. Continuing..." 
          else
            echo "::error::SukiSU hooks patch file not found: $HOOKS_PATCH_FILE"; exit 1; 
          fi
          
          if [[ "${{ github.event.inputs.use_zram }}" == "true" ]]; then
            echo "Applying additional ZRAM compression patches..."
            cd "$COMMON_DIR_PATH" || { echo "::error::Failed to cd to $COMMON_DIR_PATH for ZRAM patch"; exit 1; }
            ZRAM_PATCH_BASE="${GITHUB_WORKSPACE}/SukiSU_patch/other/zram"
            src_inc="${ZRAM_PATCH_BASE}/lz4k/include/linux"; dst_inc="./include/linux"
            if [ -d "$src_inc" ]; then mkdir -p "$dst_inc"; if [ -n "$(ls -A "$src_inc" 2>/dev/null)" ]; then cp -r "${src_inc}/." "$dst_inc/" || echo "::warning::lz4k include copy failed"; fi; fi
            src_lib="${ZRAM_PATCH_BASE}/lz4k/lib"; dst_lib="./lib"
            if [ -d "$src_lib" ]; then mkdir -p "$dst_lib"; if [ -n "$(ls -A "$src_lib" 2>/dev/null)" ]; then cp -r "${src_lib}/." "$dst_lib/" || echo "::warning::lz4k lib copy failed"; fi; fi
            src_crypto="${ZRAM_PATCH_BASE}/lz4k/crypto"; dst_crypto="./crypto"
            if [ -d "$src_crypto" ]; then mkdir -p "$dst_crypto"; if [ -n "$(ls -A "$src_crypto" 2>/dev/null)" ]; then cp -r "${src_crypto}/." "$dst_crypto/" || echo "::warning::lz4k crypto copy failed"; fi
            else echo "::warning::ZRAM crypto src NOT FOUND: $src_crypto."; fi
            if [ -d "${ZRAM_PATCH_BASE}/lz4k_oplus" ]; then mkdir -p ./lib; cp -r "${ZRAM_PATCH_BASE}/lz4k_oplus" ./lib/ || echo "::warning::lz4k_oplus copy to lib failed"; fi
            
            LZ4KD_PATCH="${ZRAM_PATCH_BASE}/zram_patch/${{env.SELECTED_KERNEL_VERSION}}/lz4kd.patch"
            if [ -f "$LZ4KD_PATCH" ]; then cp "$LZ4KD_PATCH" ./lz4kd.patch; patch -p1 -F 3 < lz4kd.patch || echo "::warning::lz4kd patch failed for ${{ env.SELECTED_KERNEL_VERSION }}. Continuing..."; fi
            LZ4KOPLUS_PATCH="${ZRAM_PATCH_BASE}/zram_patch/${{env.SELECTED_KERNEL_VERSION}}/lz4k_oplus.patch"
            if [ -f "$LZ4KOPLUS_PATCH" ]; then cp "$LZ4KOPLUS_PATCH" ./lz4k_oplus.patch; patch -p1 -F 3 < lz4k_oplus.patch || echo "::warning::lz4k_oplus patch failed for ${{ env.SELECTED_KERNEL_VERSION }}. Continuing..."; fi
          else
            echo "Skipping ZRAM compression patches."
          fi

          echo "Applying hide stuff patch..."
          cd "$COMMON_DIR_PATH" || { echo "::error::Failed to cd to $COMMON_DIR_PATH for hide_stuff patch"; exit 1; }
          HIDE_PATCH_FILE="${GITHUB_WORKSPACE}/SukiSU_patch/69_hide_stuff.patch"
          if [ -f "$HIDE_PATCH_FILE" ]; then
            cp "$HIDE_PATCH_FILE" ./hide_stuff.patch
            patch -p1 -F 3 < hide_stuff.patch || echo "::warning::Hide stuff patch failed or applied with fuzz. Continuing..."
          else
            echo "::error::Hide stuff patch file not found: $HIDE_PATCH_FILE"; exit 1;
          fi
          echo "附加特性补丁应用完毕。"

      - name: ZRAM功能配置
        if: ${{ github.event.inputs.use_zram == 'true' }}
        run: |
          set -euo pipefail
          CONFIG_FILE_PATH="${{ env.GKI_DEFCONFIG_PATH_ENV }}"
          if [ ! -f "$CONFIG_FILE_PATH" ]; then echo "::error::gki_defconfig not found for ZRAM config"; exit 1; fi
          update_cfg() {
            local k="$1"; local v_param="$2"; local file="$3"
            sed -i "/^${k}=/d" "$file"; sed -i "/^# ${k} is not set/d" "$file"; echo "${k}=${v_param}" >> "$file"
          }
          update_cfg "CONFIG_ZSMALLOC" "y" "$CONFIG_FILE_PATH"
          update_cfg "CONFIG_ZRAM" "y" "$CONFIG_FILE_PATH"
          if [ "${{ env.SELECTED_KERNEL_VERSION }}" = "5.10" ]; then update_cfg "CONFIG_MODULE_SIG" "n" "$CONFIG_FILE_PATH"; update_cfg "CONFIG_CRYPTO_LZO" "y" "$CONFIG_FILE_PATH"; update_cfg "CONFIG_ZRAM_DEF_COMP_LZ4KD" "y" "$CONFIG_FILE_PATH"; fi
          if [ "${{ env.SELECTED_ANDROID_VERSION }}" = "android14" ] || [ "${{ env.SELECTED_ANDROID_VERSION }}" = "android15" ]; then
            MP="${{ env.KERNEL_SRC_ROOT }}/common/modules.bzl"; if [ -f "$MP" ]; then sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$MP"; fi
            update_cfg "CONFIG_MODULE_SIG_FORCE" "n" "$CONFIG_FILE_PATH"
          elif [ "${{ env.SELECTED_KERNEL_VERSION }}" = "5.10" ] || [ "${{ env.SELECTED_KERNEL_VERSION }}" = "5.15" ]; then
            GMF="${{ env.KERNEL_SRC_ROOT }}/common/android/gki_aarch64_modules"; if [ -f "$GMF" ]; then echo -n > "$GMF"; fi
          fi
          if grep -q "^CONFIG_ZSMALLOC=y$" "$CONFIG_FILE_PATH" && grep -q "^CONFIG_ZRAM=y$" "$CONFIG_FILE_PATH"; then
            update_cfg "CONFIG_CRYPTO_LZ4HC" "y" "$CONFIG_FILE_PATH"; update_cfg "CONFIG_CRYPTO_LZ4K" "y" "$CONFIG_FILE_PATH"
            update_cfg "CONFIG_CRYPTO_LZ4KD" "y" "$CONFIG_FILE_PATH"; update_cfg "CONFIG_CRYPTO_842" "y" "$CONFIG_FILE_PATH"; update_cfg "CONFIG_CRYPTO_LZ4K_OPLUS" "y" "$CONFIG_FILE_PATH"
          fi
          sort -u "$CONFIG_FILE_PATH" -o "$CONFIG_FILE_PATH"

      - name: 内核功能微调
        run: |
          set -euo pipefail
          GKI_PATH="${{ env.GKI_DEFCONFIG_PATH_ENV }}"; if [ ! -f "$GKI_PATH" ]; then echo "::error::gki_defconfig not found"; exit 1; fi
          upd_cfg() { local k="$1"; local v_param="$2"; local file="$3"; sed -i -e "/^${k}=/d" -e "/^# ${k} is not set/d" "$file"; echo "${k}=${v_param}" >> "$file"; }
          cfgs_y=( "CONFIG_KSU" "CONFIG_KSU_MANUAL_HOOK" "CONFIG_TMPFS_XATTR" "CONFIG_TMPFS_POSIX_ACL" "CONFIG_IP_NF_TARGET_TTL" "CONFIG_IP6_NF_TARGET_HL" "CONFIG_IP6_NF_MATCH_HL" "CONFIG_TCP_CONG_ADVANCED" "CONFIG_TCP_CONG_BBR" "CONFIG_NET_SCH_FQ" "CONFIG_KSU_SUSFS" "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT" "CONFIG_KSU_SUSFS_SUS_PATH" "CONFIG_KSU_SUSFS_SUS_MOUNT" "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT" "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT" "CONFIG_KSU_SUSFS_SUS_KSTAT" "CONFIG_KSU_SUSFS_TRY_UMOUNT" "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT" "CONFIG_KSU_SUSFS_SPOOF_UNAME" "CONFIG_KSU_SUSFS_ENABLE_LOG" "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS" "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG" "CONFIG_KSU_SUSFS_OPEN_REDIRECT" )
          cfgs_n=( "CONFIG_KSU_SUSFS_SUS_SU" "CONFIG_KSU_SUSFS_SUS_OVERLAYFS" "CONFIG_TCP_CONG_BIC" "CONFIG_TCP_CONG_WESTWOOD" "CONFIG_TCP_CONG_HTCP" )
          for ck in "${cfgs_y[@]}"; do upd_cfg "$ck" "y" "$GKI_PATH"; done
          for cn in "${cfgs_n[@]}"; do upd_cfg "$cn" "n" "$GKI_PATH"; done
          if [[ "${{ env.EFFECTIVE_USE_KPM }}" == "true" ]]; then upd_cfg "CONFIG_KPM" "y" "$GKI_PATH"; else upd_cfg "CONFIG_KPM" "n" "$GKI_PATH"; fi
          sort -u "$GKI_PATH" -o "$GKI_PATH"
          for fp in "${{ env.KERNEL_SRC_ROOT }}/common/build.config.gki" "${{ env.KERNEL_SRC_ROOT }}/common/build.config.gki.aarch64" "${{ env.KERNEL_SRC_ROOT }}/common/build.config"; do
            if [ -f "$fp" ]; then sed -i 's/check_defconfig//g' "$fp"; fi
          done

      - name: 内核版本设定
        working-directory: ${{ env.KERNEL_SRC_ROOT }}
        run: |
          set -euo pipefail
          GKI_DEFCONFIG="${{ env.GKI_DEFCONFIG_PATH_ENV }}"
          SLS="./common/scripts/setlocalversion"
          MKCOMPILE_H_SCRIPT="./common/scripts/mkcompile_h"

          if [ -f "$GKI_DEFCONFIG" ]; then
            sed -i '/^CONFIG_LOCALVERSION=/d' "$GKI_DEFCONFIG"; echo "CONFIG_LOCALVERSION=\"${{ env.FINAL_KERNEL_LOCAL_VERSION }}\"" >> "$GKI_DEFCONFIG"
            sed -i '/^CONFIG_LOCALVERSION_AUTO=/d' "$GKI_DEFCONFIG"; echo '# CONFIG_LOCALVERSION_AUTO is not set' >> "$GKI_DEFCONFIG"
            sort -u "$GKI_DEFCONFIG" -o "$GKI_DEFCONFIG"
            echo "Defconfig: CONFIG_LOCALVERSION set to '${{ env.FINAL_KERNEL_LOCAL_VERSION }}', CONFIG_LOCALVERSION_AUTO unset."
          fi

          if [ -f "$SLS" ]; then
            echo '#!/bin/sh' > "$SLS"
            echo 'echo "${{ env.FINAL_KERNEL_LOCAL_VERSION }}"' >> "$SLS" 
            chmod +x "$SLS"
            echo "setlocalversion script updated to output: ${{ env.FINAL_KERNEL_LOCAL_VERSION }}"
          else
            echo "::warning::setlocalversion script not found at $SLS."
          fi
          
          if [ -f "$MKCOMPILE_H_SCRIPT" ]; then
            echo "Hardcoding timestamp in $MKCOMPILE_H_SCRIPT..."
            perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sat Apr 20 04:20:00 UTC 2024"}' "$MKCOMPILE_H_SCRIPT"
            echo "mkcompile_h timestamp modification attempted."
          else
            echo "::warning:: mkcompile_h script not found at $MKCOMPILE_H_SCRIPT"
          fi

          if [ ! -f "./build/build.sh" ]; then 
            if [ -f "./common/BUILD.bazel" ]; then sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' "./common/BUILD.bazel"; fi
            find ./common/android/ -name "abi_gki_protected_exports_*" -delete
            if [ -f "./build/kernel/kleaf/impl/stamp.bzl" ]; then sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" "./build/kernel/kleaf/impl/stamp.bzl"; fi
          fi
          echo "Kernel version parameter configuration finished."
          
      - name: 关键配置校验
        run: |
          set -euo pipefail
          GKI_CHECK="${{ env.GKI_DEFCONFIG_PATH_ENV }}"; if [ ! -f "$GKI_CHECK" ]; then exit 1; fi
          CRIT_FAIL=0
          check_cfg() {
            local k="$1"; local ev="$2"; local c="${3:-false}"
            local current_val=""
            if grep -q "^${k}=" "$GKI_CHECK"; then
              current_val=$(grep "^${k}=" "$GKI_CHECK" | cut -d'=' -f2)
            elif grep -q "^# ${k} is not set$" "$GKI_CHECK"; then
              current_val="# ${k} is not set"
            fi

            if [[ "$current_val" == "$ev" ]]; then
              echo "${k}=${ev} OK."
            else
              if [[ "$c" == "true" ]]; then 
                echo "::error::CRITICAL: ${k} expected '${ev}' but got '${current_val}'"
                CRIT_FAIL=1
              else 
                echo "::warning::${k} expected '${ev}' but got '${current_val}'"
              fi
            fi
          }
          check_cfg "CONFIG_KSU" "y" "true"; check_cfg "CONFIG_KSU_SUSFS" "y" "false"; check_cfg "CONFIG_MODVERSIONS" "y" "false"
          check_cfg "CONFIG_LOCALVERSION" "\"${{env.FINAL_KERNEL_LOCAL_VERSION}}\"" "false" 
          check_cfg "CONFIG_LOCALVERSION_AUTO" "# CONFIG_LOCALVERSION_AUTO is not set" "false"
          if [[ "${{ github.event.inputs.use_zram }}" == "true" ]]; then
            check_cfg "CONFIG_ZRAM" "y" "true"; check_cfg "CONFIG_CRYPTO_LZ4K" "y" "true"
          fi
          if [ "$CRIT_FAIL" -ne 0 ]; then echo "--- Defconfig Contents ---"; cat "$GKI_CHECK"; echo "--- End Defconfig ---"; exit 1; fi

      - name: 执行内核编译
        uses: nick-fields/retry@v3
        env:
          BAZEL_DISK_CACHE_PATH_FOR_BUILD: "/home/runner/.cache/bazel" 
        with:
          timeout_minutes: 75
          max_attempts: 2
          retry_on: timeout
          command: |
            set -euo pipefail
            set -x 
            execute_build_process() {
              cd "${{ env.KERNEL_SRC_ROOT }}" || exit 1
              B_SCRIPT="./build/build.sh"
              
              if [ -f "$B_SCRIPT" ]; then
                echo "Using legacy build.sh script for compilation..."
                LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 BUILD_CONFIG=common/build.config.gki.aarch64 CC="/usr/bin/ccache clang" build/build.sh || { echo "::error::Legacy build.sh failed."; exit 1; }
              else
                echo "Using Bazel build system for compilation..."
                CMD_TO_EXEC="tools/bazel build \
                  --disk_cache=${BAZEL_DISK_CACHE_PATH_FOR_BUILD} \
                  --config=fast \
                  --lto=thin \
                  //common:kernel_aarch64_dist"
                
                echo "Executing Bazel command via bash -c: ${CMD_TO_EXEC}"
                bash -c "${CMD_TO_EXEC}" || { echo "::error::Bazel build failed."; exit 1; }
              fi
            }
            execute_build_process
            echo "Ccache statistics after build:"
            ccache --show-stats
            if [ -n "${CCACHE_LOGFILE}" ] && [ -f "${CCACHE_LOGFILE}" ]; then
              echo "Ccache log file (${CCACHE_LOGFILE}) size: $(du -sh ${CCACHE_LOGFILE} | cut -f1)"
              echo "Last 10 lines of ccache log:"
              tail -n 10 "${CCACHE_LOGFILE}" || true
            fi
            if [ -f "${{ github.workspace }}/${{ env.BAZEL_PROFILE_FILENAME }}" ]; then
                echo "Bazel profile found at: ${{ github.workspace }}/${{ env.BAZEL_PROFILE_FILENAME }}"
            else
                echo "Bazel profile file not found."
            fi
            echo "Kernel compilation step finished."
      
      - name: KPM映像处理 (旧版)
        if: env.EFFECTIVE_USE_KPM == 'true' && (env.SELECTED_ANDROID_VERSION == 'android12' || env.SELECTED_ANDROID_VERSION == 'android13') && env.SELECTED_KERNEL_VERSION != '6.6'
        run: |
          set -euo pipefail
          IMG_DIR="${{ env.KERNEL_SRC_ROOT }}/out/${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}/dist"
          IMG_FILE="$IMG_DIR/Image"
          if [ -d "$IMG_DIR" ] && [ -f "$IMG_FILE" ]; then
            cd "$IMG_DIR" || exit 1
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o pk
            chmod +x pk; ./pk
            if [ -f "oImage" ]; then mv Image Image.o; mv oImage Image; fi
          fi

      - name: KPM映像处理 (新版)
        if: env.EFFECTIVE_USE_KPM == 'true' && (env.SELECTED_ANDROID_VERSION == 'android14' || env.SELECTED_ANDROID_VERSION == 'android15') && env.SELECTED_KERNEL_VERSION != '6.6'
        run: |
          set -euo pipefail
          IMG_DIR="${{ env.KERNEL_SRC_ROOT }}/bazel-bin/common/kernel_aarch64/"
          IMG_FILE="$IMG_DIR/Image"
          if [ -d "$IMG_DIR" ] && [ -f "$IMG_FILE" ]; then
            cd "$IMG_DIR" || exit 1
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o pk
            chmod +x pk; ./pk
            if [ -f "oImage" ]; then mv Image Image.o; mv oImage Image; fi
          fi

      - name: 内核映像打包准备
        run: |
          set -euo pipefail
          IMG_SRC=""
          LGC_IMG="${{ env.KERNEL_SRC_ROOT }}/out/${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}/dist/Image"
          BZL_IMG1="${{ env.KERNEL_SRC_ROOT }}/bazel-bin/common/kernel_aarch64/Image"
          BZL_IMG2="${{ env.KERNEL_SRC_ROOT }}/out/android-gki/dist/Image" 
          if [ -f "$LGC_IMG" ]; then IMG_SRC="$LGC_IMG"
          elif [ -f "$BZL_IMG1" ]; then IMG_SRC="$BZL_IMG1"
          elif [ -f "$BZL_IMG2" ]; then IMG_SRC="$BZL_IMG2"
          else
            echo "::error::Compiled Image not found."
            ls -R "${{ env.KERNEL_SRC_ROOT }}/out/" || true
            ls -R "${{ env.KERNEL_SRC_ROOT }}/bazel-bin/" || true
            exit 1
          fi
          AK3_DIR="$GITHUB_WORKSPACE/AnyKernel3"
          if [ ! -d "$AK3_DIR" ]; then echo "::error::AnyKernel3 dir not found."; exit 1; fi
          cp "$IMG_SRC" "$AK3_DIR/Image"

      - name: 映像完整性校验
        run: |
          set -euo pipefail
          IMG_VALIDATE="$GITHUB_WORKSPACE/AnyKernel3/Image"
          if [ ! -f "$IMG_VALIDATE" ]; then echo "::error::Kernel Image not found for validation: $IMG_VALIDATE"; exit 1; fi
          file_out=$(file "$IMG_VALIDATE"); echo "File output: $file_out"
          if echo "$file_out" | grep -q "ARM64" && echo "$file_out" | grep -q "Linux kernel"; then
            echo "Validation OK."
          else
            echo "::error::Validation FAILED: '$file_out'"
            exit 1
          fi

      - name: 构建产物上传
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.INTERMEDIATE_ARTIFACT_NAME }} 
          path: ${{ github.workspace }}/AnyKernel3
          if-no-files-found: error

      - name: 构建环境清理
        if: always()
        run: |
          set -euo pipefail
          if [ -d "/home/runner/.cache/bazel" ]; then rm -rf /home/runner/.cache/bazel || echo "::warning::Bazel disk cache removal failed (/home/runner/.cache/bazel)."; fi
          ccache -s

      - name: 诊断日志归档
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.SELECTED_ANDROID_VERSION }}-${{ env.SELECTED_KERNEL_VERSION }}-${{ github.run_id }}
          path: |
            ${{ env.CCACHE_LOGFILE }}
            ${{ github.workspace }}/${{ env.BAZEL_PROFILE_FILENAME }}
          if-no-files-found: ignore

      - name: 发布参数准备
        id: prepare_release_outputs
        shell: bash
        run: |
          set -euo pipefail
          _svn="${{ env.SUKI_VERSION_NUM }}"; 
          _kv="${{ env.SELECTED_KERNEL_VERSION }}"; 
          _sl="${{ env.SELECTED_SUB_LEVEL }}"; 
          _suf_for_release_name="${{ env.ARTIFACT_NAME_SUFFIX_PART_ENV }}" 
          _base="SukiSUUltra"; _tit=""; _tag=""
          
          if [[ "$_svn" != "NoVer" && "$_svn" =~ ^[0-9]+$ && -z "${{ github.event.inputs.custom_version_suffix }}" ]]; then
            _aname_for_release="AnyKernel3_${_base}_${_svn}_${_kv}-${_sl}${_suf_for_release_name}"
            _tit="${_base}-${_svn}"
            _tag="${_base}-${_svn}_${_kv}-${_sl}${_suf_for_release_name}"
          else 
            _effective_suffix_for_naming="${{ github.event.inputs.custom_version_suffix }}"
            if [[ -z "$_effective_suffix_for_naming" ]]; then 
                _effective_suffix_for_naming="${_suf_for_release_name}" 
            fi
            
            _version_indicator_for_naming="NoVer" 
            if [[ -n "${{ github.event.inputs.custom_version_suffix }}" ]]; then
                _version_indicator_for_naming="Custom" 
                _tit="${_base}-Custom${_effective_suffix_for_naming}"
            elif [[ "$_svn" != "NoVer" && "$_svn" =~ ^[0-9]+$ ]]; then 
                 _version_indicator_for_naming="${_svn}"
                 _tit="${_base}-${_svn}" 
            else 
                 _tit="${_base}-NoVer${_effective_suffix_for_naming}"
            fi

            _aname_for_release="AnyKernel3_${_base}_${_version_indicator_for_naming}_${_kv}-${_sl}${_effective_suffix_for_naming}"
            _tag="${_base}-${_version_indicator_for_naming}_${_kv}-${_sl}${_effective_suffix_for_naming}"
          fi
          
          echo "Calculated _aname_for_release for job output: $_aname_for_release"
          echo "artifact_name_for_release=$(echo "$_aname_for_release" | sed 's/[^a-zA-Z0-9._\-\(\)]/-/g')" >> "$GITHUB_OUTPUT"
          echo "release_tag_name=$(echo "$_tag" | sed 's/[^a-zA-Z0-9._\-\(\)]/-/g')" >> "$GITHUB_OUTPUT"
          echo "release_title_name=${_tit}" >> "$GITHUB_OUTPUT"

  create_release: 
    name: 创建发行版 
    needs: kernel_build_core
    permissions:
      contents: write 
    runs-on: ubuntu-latest
    if: success() && github.event.inputs.upload_to_release == 'true'
    steps:
      - name: 安装 zip 工具
        run: |
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends zip
      - name: 调试 Artifact 下载参数
        run: |
          echo "期望下载的 Artifact 固定名称: AnyKernel3_Content_For_Release" 
          echo "最终 Release 文件名基础将是: ${{ needs.kernel_build_core.outputs.artifact_name_for_release }}"
      - name: 下载内核刷机包 (Artifact)
        uses: actions/download-artifact@v4
        with:
          name: "AnyKernel3_Content_For_Release" # *** 使用固定的字面量名称 ***
          path: downloaded_artifact/
      - name: 准备刷机包并设置路径
        id: package_kernel
        shell: bash
        run: |
          set -euo pipefail
          echo "当前工作目录: $(pwd)"
          echo "查看 downloaded_artifact 目录内容 (应仅为 AnyKernel3 文件):"
          ls -R downloaded_artifact
          
          cd downloaded_artifact
          final_zip_name_base="${{ needs.kernel_build_core.outputs.artifact_name_for_release }}"
          final_zip_name="${final_zip_name_base}.zip"
          echo "最终 ZIP 文件名将是: $final_zip_name"
          
          if [ -z "$(ls -A .)" ]; then 
            echo "::error::Downloaded artifact directory (path: downloaded_artifact/) is empty. Artifact 'AnyKernel3_Content_For_Release' 可能未成功下载或其内容为空。"
            exit 1; 
          fi
          
          zip -r9 "../${final_zip_name}" . 
          cd ..
          if [ ! -f "${final_zip_name}" ]; then echo "::error::Failed to create zip package named ${final_zip_name}."; exit 1; fi
          echo "packaged_zip=${final_zip_name}" >> $GITHUB_OUTPUT
      - name: 创建 Release 并上传刷机包
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ steps.package_kernel.outputs.packaged_zip }}
          tag: ${{ needs.kernel_build_core.outputs.release_tag }}
          name: ${{ needs.kernel_build_core.outputs.release_title }}
          body: |
            ## 自动构建内核 (${{ needs.kernel_build_core.outputs.release_title }})

            **构建于: `${{ needs.kernel_build_core.outputs.current_build_date_formatted_output }}`**

            ### 核心参数
            | 参数项 | 值 |
            |---|---|
            | 内核版本构建输入 | `${{ github.event.inputs.kernel_to_build }}` |
            | 内核名 (LOCALVERSION) | `${{ needs.kernel_build_core.outputs.parsed_kernel_version_output }}.${{ needs.kernel_build_core.outputs.parsed_sub_level_output }}${{ needs.kernel_build_core.outputs.final_kernel_local_version_output }}` |
            | SukiSU 版本 (计算) | `${{ needs.kernel_build_core.outputs.sukisu_version_from_build_job }}` |
            | SukiSU 功能分支 | `${{ github.event.inputs.kernelsu_branch }}` |

            ### 构建选项
            * **使用ZRAM**: `${{ github.event.inputs.use_zram }}`
            * **使用KPM**: `${{ needs.kernel_build_core.outputs.effective_kpm_setting }}` (实际生效)

            ---
            *Commit SHA: `${{ github.sha }}`*
            *Workflow Run ID: `${{ github.run_id }}`*
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true