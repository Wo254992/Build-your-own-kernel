name: A编译内核 (单文件矩阵版)

permissions:
  contents: write
  actions: write

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.main_kernel_choice }}-${{ github.event.inputs.additional_kernels_list }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      main_kernel_choice:
        description: "主要编译内核系列 (默认 A14 6.1)。若要多选或指定未列出,用下方列表,此处可选'none'。"
        required: true
        type: choice
        options: ['a14_61', 'a12_510', 'a13_510', 'a13_515', 'a14_515', 'a15_66', 'none']
        default: 'a14_61'
      additional_kernels_list:
        description: "额外编译内核系列列表,逗号分隔(如:a12_510,a15_66)。将与上方选择合并去重。"
        required: false
        type: string
        default: ''
      kernelsu_variant:
        description: "选择 KernelSU 变体"
        required: true
        type: choice
        options: ['SukiSU', 'Official', 'Next', 'MKSU']
        default: SukiSU
      kernelsu_branch:
        description: "选择 KSU 分支 (SukiSU 'Dev(开发)' 会使用 '-s susfs-dev' 参数)"
        required: true
        type: choice
        options: ['Stable(标准)', 'Dev(开发)', 'Other(其他/指定)']
        default: Dev(开发)
      version_suffix:
        description: '自定义内核 LOCALVERSION 后缀 (留空则基于日期和随机字符,应用于所有内核)'
        required: false
        type: string
      use_zram:
        description: '是否启用额外ZRAM算法补丁及配置?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: '是否启用KPM功能补丁(若内核适用)?'
        required: true
        type: boolean
        default: true
      upload_to_release:
        description: '是否为每个成功编译的内核创建 GitHub Release?'
        required: true
        type: choice
        options: ['true', 'false']
        default: 'true'
      lto_override:
        description: "LTO优化: none(关闭), thin(ThinLTO), full(FullLTO), default(脚本内默认)"
        required: false
        type: choice
        options: ['default', 'none', 'thin', 'full']
        default: 'thin'

jobs:
  prepare_build_matrix:
    name: 准备内核编译矩阵
    runs-on: ubuntu-latest
    outputs:
      build_matrix_json: ${{ steps.generate_matrix.outputs.matrix_json }}
      selected_kernels_count: ${{ steps.generate_matrix.outputs.selected_kernels_count }}
    steps:
      - name: 生成编译矩阵JSON
        id: generate_matrix
        shell: bash
        run: |
          main_choice="${{ github.event.inputs.main_kernel_choice }}"
          additional_list="${{ github.event.inputs.additional_kernels_list }}"
          declare -A selected_families_map
          
          if [[ "$main_choice" != "none" && -n "$main_choice" ]]; then
            selected_families_map["$main_choice"]=1
          fi
          cleaned_additional_list=$(echo "$additional_list" | tr -d ' ' | sed 's/,/ /g')
          for family_id_loop in $cleaned_additional_list; do
            if [[ -n "$family_id_loop" ]]; then
              selected_families_map["$family_id_loop"]=1
            fi
          done
          
          matrix_array_json_elements=()
          
          # 定义内核系列及其子版本, 您可以在这里通过行首加 # 来注释掉不想编译的子版本
          declare -A KERNEL_FAMILIES_SUB_VERSIONS
          KERNEL_FAMILIES_SUB_VERSIONS["a12_510"]="
          168|2023-04|r9
          198|2024-01|r17
          205|2024-03|r9
          209|2024-05|r13
          218|2024-08|r14
          226|2024-11|r8
          233|2025-02|r1
          X|lts|r1
          "
          KERNEL_FAMILIES_SUB_VERSIONS["a13_510"]="
          198|2024-01|
          205|2024-03|
          209|2024-05|
          214|2024-07|
          218|2024-08|
          223|2024-11|
          228|2025-01|
          X|lts|
          "
          KERNEL_FAMILIES_SUB_VERSIONS["a13_515"]="
          123|2023-11|
          137|2024-01|
          144|2024-03|
          148|2024-05|
          151|2024-08|
          167|2024-11|
          170|2025-01|
          X|lts|
          "
          KERNEL_FAMILIES_SUB_VERSIONS["a14_515"]="
          131|2023-11|
          137|2024-01|
          144|2024-03|
          148|2024-05|
          149|2024-06|
          153|2024-07|
          158|2024-08|
          167|2024-11|
          170|2025-01|
          "
          KERNEL_FAMILIES_SUB_VERSIONS["a14_61"]="
          75|2024-05|
          "
          KERNEL_FAMILIES_SUB_VERSIONS["a15_66"]="
          50|2024-10|
          56|2024-11|
          57|2024-12|
          58|2025-01|
          66|2025-02|
          77|2025-03|
          X|lts|
          "

          declare -A KERNEL_FAMILIES_DETAILS
          KERNEL_FAMILIES_DETAILS["a12_510"]="android12|5.10|-android12-9"
          KERNEL_FAMILIES_DETAILS["a13_510"]="android13|5.10|-android13-9"
          KERNEL_FAMILIES_DETAILS["a13_515"]="android13|5.15|-android13-8"
          KERNEL_FAMILIES_DETAILS["a14_515"]="android14|5.15|-android14-5.15"
          KERNEL_FAMILIES_DETAILS["a14_61"]="android14|6.1|-android14-11"
          KERNEL_FAMILIES_DETAILS["a15_66"]="android15|6.6|-android15-8"

          selected_kernels_count=0
          for family_id in "${!selected_families_map[@]}"; do
            if [[ -n "${KERNEL_FAMILIES_DETAILS[$family_id]}" && -n "${KERNEL_FAMILIES_SUB_VERSIONS[$family_id]}" ]]; then
              selected_kernels_count=$((selected_kernels_count + 1))
              IFS='|' read -r android_ver_id kernel_ver_id local_ver_fixed_part <<< "${KERNEL_FAMILIES_DETAILS[$family_id]}"
              
              sub_versions_raw_data="${KERNEL_FAMILIES_SUB_VERSIONS[$family_id]}"
              while IFS= read -r item_line; do
                # Skip empty lines and lines starting with #
                if [[ -n "$item_line" && ! "$item_line" =~ ^[[:space:]]*# && ! "$item_line" =~ ^[[:space:]]*$ ]]; then
                  IFS='|' read -r sub_level os_patch revision <<< "$item_line"
                  
                  name_suffix_job="${family_id}_${sub_level}_${os_patch//-/}"
                  [[ -n "$revision" ]] && name_suffix_job+="_${revision}"
                  name_suffix_job_sanitized=$(echo "$name_suffix_job" | sed 's/\./_/g' | sed 's/[^a-zA-Z0-9_]/-/g')

                  json_object="{\"family_id\":\"$family_id\",\"job_name_suffix\":\"$name_suffix_job_sanitized\",\"android_version_id\":\"$android_ver_id\",\"kernel_version_id\":\"$kernel_ver_id\",\"sub_level\":\"$sub_level\",\"os_patch_level\":\"$os_patch\",\"revision\":\"$revision\",\"local_version_fixed_part\":\"$local_ver_fixed_part\"}"
                  matrix_array_json_elements+=("$json_object")
                fi
              done <<< "$sub_versions_raw_data"
            fi
          done
          
          final_json_array_str="[$(IFS=,; echo "${matrix_array_json_elements[*]}")]"
          echo "Generated Matrix JSON: $final_json_array_str"
          echo "matrix_json=$final_json_array_str" >> "$GITHUB_OUTPUT"
          echo "selected_kernels_count=$selected_kernels_count" >> "$GITHUB_OUTPUT"

  determine_ksu_details:
    name: 准备KernelSU详情
    runs-on: ubuntu-latest
    outputs:
      ksu_actual_variant: ${{ steps.set_ksu_details.outputs.ksu_variant_actual_out }}
      ksu_version_for_release: ${{ steps.set_ksu_details.outputs.ksu_version_for_release_out }}
      ksu_job_name_suffix: ${{ steps.set_ksu_details.outputs.ksu_job_name_suffix_out }}
      ksu_setup_script_url: ${{ steps.set_ksu_details.outputs.ksu_setup_script_url_out }}
      ksu_setup_script_args: ${{ steps.set_ksu_details.outputs.ksu_setup_script_args_out }}
      ksu_patch_repo_url: ${{ steps.set_ksu_details.outputs.ksu_patch_repo_url_out }}
      ksu_patch_repo_dir: ${{ steps.set_ksu_details.outputs.ksu_patch_repo_dir_out }}
    steps:
      - name: 安装Git
        run: sudo apt-get update && sudo apt-get install -y git
      - name: 设置KernelSU详情
        id: set_ksu_details
        env:
          KSU_VARIANT_INPUT: ${{ github.event.inputs.kernelsu_variant }}
          KSU_BRANCH_INPUT: ${{ github.event.inputs.kernelsu_branch }}
        shell: bash
        run: |
          ksu_variant_actual_out_val="$KSU_VARIANT_INPUT"
          ksu_version_for_release_out_val="NoVer"
          ksu_job_name_suffix_out_val=""
          ksu_setup_script_url_out_val=""
          ksu_setup_script_args_out_val=""
          ksu_patch_repo_url_out_val=""
          ksu_patch_repo_dir_out_val="KernelSU_variant_patches" # Default patch dir name

          case "$KSU_VARIANT_INPUT" in
            "SukiSU")
              ksu_setup_script_url_out_val="https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh"
              ksu_patch_repo_url_out_val="https://github.com/ShirkNeko/SukiSU_patch.git"
              ksu_patch_repo_dir_out_val="SukiSU_patch_files"
              SUKI_REPO_URL="https://github.com/ShirkNeko/SukiSU-Ultra.git"
              CLONE_BRANCH_SUKI="main"
              if git clone --branch "$CLONE_BRANCH_SUKI" --single-branch "$SUKI_REPO_URL" SukiSU_temp_for_version_job; then
                cd SukiSU_temp_for_version_job
                commit_count_suki=$(git rev-list --count HEAD 2>/dev/null || echo 0)
                if [[ "$commit_count_suki" -ne "0" && "$commit_count_suki" != "err"* ]]; then
                  calculated_version_suki=$(expr $commit_count_suki + 10606)
                  ksu_version_for_release_out_val=$calculated_version_suki
                  ksu_job_name_suffix_out_val=" (SukiSU $calculated_version_suki)"
                else
                  ksu_job_name_suffix_out_val=" (SukiSU - VerErr)"
                fi
                cd .. && rm -rf SukiSU_temp_for_version_job
              else
                ksu_job_name_suffix_out_val=" (SukiSU - CloneErr)"
              fi
              if [[ "$KSU_BRANCH_INPUT" == "Dev(开发)" ]]; then ksu_setup_script_args_out_val="-s susfs-dev"; fi
              ;;
            "Official")
              ksu_setup_script_url_out_val="https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh"
              ksu_job_name_suffix_out_val=" (OfficialKSU)"
              if [[ "$KSU_BRANCH_INPUT" == "Dev(开发)" ]]; then ksu_setup_script_args_out_val="-s main"; else ksu_setup_script_args_out_val="-"; fi # Official KSU uses tags for stable
              ;;
            "Next")
              ksu_setup_script_url_out_val="https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh"
              ksu_job_name_suffix_out_val=" (KSUNext)"
              if [[ "$KSU_BRANCH_INPUT" == "Dev(开发)" ]]; then ksu_setup_script_args_out_val="-s next"; else ksu_setup_script_args_out_val="-"; fi
              ksu_patch_repo_url_out_val="https://github.com/WildPlusKernel/kernel_patches.git" # Assuming Next patches are here
              ksu_patch_repo_dir_out_val="KSUNext_patches_dir"
              ;;
            "MKSU")
              ksu_setup_script_url_out_val="https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh"
              ksu_job_name_suffix_out_val=" (MKSU)"
              if [[ "$KSU_BRANCH_INPUT" == "Dev(开发)" ]]; then ksu_setup_script_args_out_val="-s main"; else ksu_setup_script_args_out_val="-"; fi
              ksu_patch_repo_url_out_val="https://github.com/WildPlusKernel/kernel_patches.git" # Assuming MKSU patches are here
              ksu_patch_repo_dir_out_val="MKSU_patches_dir"
              ;;
            *)
              ksu_job_name_suffix_out_val=" ($KSU_VARIANT_INPUT - $KSU_BRANCH_INPUT - Unknown)"
              ;;
          esac
          
          echo "ksu_variant_actual_out=$ksu_variant_actual_out_val" >> "$GITHUB_OUTPUT"
          echo "ksu_version_for_release_out=$ksu_version_for_release_out_val" >> "$GITHUB_OUTPUT"
          echo "ksu_job_name_suffix_out=$ksu_job_name_suffix_out_val" >> "$GITHUB_OUTPUT"
          echo "ksu_setup_script_url_out=$ksu_setup_script_url_out_val" >> "$GITHUB_OUTPUT"
          echo "ksu_setup_script_args_out=$ksu_setup_script_args_out_val" >> "$GITHUB_OUTPUT"
          echo "ksu_patch_repo_url_out=$ksu_patch_repo_url_out_val" >> "$GITHUB_OUTPUT"
          echo "ksu_patch_repo_dir_out=$ksu_patch_repo_dir_out_val" >> "$GITHUB_OUTPUT"

  compile_and_release_kernels:
    name: Build-${{ matrix.job_name_suffix }}${{ needs.determine_ksu_details.outputs.ksu_job_name_suffix }}
    needs: [prepare_build_matrix, determine_ksu_details]
    if: needs.prepare_build_matrix.outputs.selected_kernels_count > 0
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare_build_matrix.outputs.build_matrix_json) }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KSU_ACTUAL_VARIANT_ENV: ${{ needs.determine_ksu_details.outputs.ksu_actual_variant }}
      KSU_VERSION_ENV: ${{ needs.determine_ksu_details.outputs.ksu_version_for_release }}
      KSU_SETUP_SCRIPT_URL_ENV: ${{ needs.determine_ksu_details.outputs.ksu_setup_script_url }}
      KSU_SETUP_SCRIPT_ARGS_ENV: ${{ needs.determine_ksu_details.outputs.ksu_setup_script_args }}
      KSU_PATCH_REPO_URL_ENV: ${{ needs.determine_ksu_details.outputs.ksu_patch_repo_url }}
      KSU_PATCH_REPO_DIR_ENV: ${{ needs.determine_ksu_details.outputs.ksu_patch_repo_dir }}
      CCACHE_LOGFILE: /tmp/ccache_${{ matrix.job_name_suffix }}.log
      BAZEL_PROFILE_FILENAME: bazel_profile_${{ matrix.job_name_suffix }}.json
      BAZEL_OPTIMIZATION_FLAGS: >-
        --jobs=$(nproc)
        --local_ram_resources=HOST_RAM*0.8
      ANDROID_VERSION_MATRIX: ${{ matrix.android_version_id }}
      KERNEL_VERSION_MATRIX: ${{ matrix.kernel_version_id }}
      SUB_LEVEL_MATRIX: ${{ matrix.sub_level }}
      OS_PATCH_LEVEL_MATRIX: ${{ matrix.os_patch_level }}
      REVISION_MATRIX: ${{ matrix.revision }}
      LOCAL_VERSION_FIXED_PART_MATRIX: ${{ matrix.local_version_fixed_part }}
      CONFIG_ENV_MATRIX: ${{ matrix.android_version_id }}-${{ matrix.kernel_version_id }}-${{ matrix.sub_level }}
      GKI_DEFCONFIG_PATH_ENV_MATRIX: ${GITHUB_WORKSPACE}/${{ matrix.android_version_id }}-${{ matrix.kernel_version_id }}-${{ matrix.sub_level }}/common/arch/arm64/configs/gki_defconfig

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with: { root-reserve-mb: 8192, temp-reserve-mb: 2048, swap-size-mb: 8192, remove-dotnet: "true", remove-android: "true", remove-haskell: "true", remove-codeql: "true" }

      - name: 生成版本后缀和日期
        id: generate_kernel_version_strings
        env:
          USER_PROVIDED_VERSION_SUFFIX: ${{ github.event.inputs.version_suffix }}
          FIXED_PART_FROM_MATRIX_ENV: ${{ env.LOCAL_VERSION_FIXED_PART_MATRIX }}
        run: |
          final_kernel_local_version_val=""
          artifact_name_suffix_part_val=""
          current_date_yyyymmdd_val=$(date +%Y%m%d)
          current_date_formatted_val=$(date +"%Y年%m月%d日")
          if [[ -n "$USER_PROVIDED_VERSION_SUFFIX" ]]; then
            final_kernel_local_version_val="$USER_PROVIDED_VERSION_SUFFIX"
            artifact_name_suffix_part_val="$USER_PROVIDED_VERSION_SUFFIX"
          else
            prefix1_val="gd"; prefix2_val="ab"
            random_hex_11_val_gs=$(head /dev/urandom | LC_ALL=C tr -dc 'a-f0-9' | head -c 11 || true)
            random_digits_8_val_gs=$(head /dev/urandom | LC_ALL=C tr -dc '0-9' | head -c 8 || true)
            final_kernel_local_version_val="${FIXED_PART_FROM_MATRIX_ENV}-${prefix1_val}${random_hex_11_val_gs}-${prefix2_val}${random_digits_8_val_gs}"
            artifact_name_suffix_part_val="-${current_date_yyyymmdd_val}"
          fi
          echo "FINAL_KERNEL_LOCAL_VERSION_OUT=${final_kernel_local_version_val}" >> "$GITHUB_OUTPUT"
          echo "ARTIFACT_NAME_SUFFIX_PART_OUT=${artifact_name_suffix_part_val}" >> "$GITHUB_OUTPUT"
          echo "CURRENT_BUILD_DATE_FORMATTED_OUT=${current_date_formatted_val}" >> "$GITHUB_OUTPUT"

      - name: 调整KPM设置
        id: kpm_settings_compile_step
        env:
          EFFECTIVE_KPM_INPUT: ${{ github.event.inputs.use_kpm }}
        run: |
          EFFECTIVE_KPM_VALUE_COMPILE=""
          if [[ "${{ env.ANDROID_VERSION_MATRIX }}" == "android15" && "${{ env.KERNEL_VERSION_MATRIX }}" == "6.6" ]]; then
            EFFECTIVE_KPM_VALUE_COMPILE="false"
          else
            EFFECTIVE_KPM_VALUE_COMPILE="$EFFECTIVE_KPM_INPUT"
          fi
          echo "EFFECTIVE_USE_KPM_FOR_RELEASE=${EFFECTIVE_KPM_VALUE_COMPILE}" >> "$GITHUB_ENV" # For release body
          echo "effective_kpm_value_for_config=${EFFECTIVE_KPM_VALUE_COMPILE}" >> "$GITHUB_OUTPUT" # For defconfig

      - name: 安装 ccache及依赖
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          if ccache --version | grep -q 'Zstd'; then ccache --set-config=compression_type=zstd; fi
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ env.ANDROID_VERSION_MATRIX }}-${{ env.KERNEL_VERSION_MATRIX }}-${{ env.SUB_LEVEL_MATRIX }}-ccache-${{ hashFiles(env.GKI_DEFCONFIG_PATH_ENV_MATRIX, format('{0}/common/build.config.gki', env.CONFIG_ENV_MATRIX), format('{0}/common/build.config.gki.aarch64', env.CONFIG_ENV_MATRIX), format('{0}/common/build.config', env.CONFIG_ENV_MATRIX)) }}
          restore-keys: |
            ${{ env.ANDROID_VERSION_MATRIX }}-${{ env.KERNEL_VERSION_MATRIX }}-${{ env.SUB_LEVEL_MATRIX }}-ccache-

      - name: 缓存工具链
        id: cache-toolchain_compile_step
        uses: actions/cache@v4
        with: # 这是之前报错的第 366 行所在的位置
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain_compile_step.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR_DL=https://android.googlesource.com
          BRANCH_DL=main-kernel-build-2024
          git clone $AOSP_MIRROR_DL/kernel/prebuilts/build-tools -b $BRANCH_DL --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR_DL/platform/system/tools/mkbootimg -b main --depth 1 mkbootimg

      - name: 设置工具链环境变量
        run: |
          echo "AVBTOOL_FOR_STEP=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG_FOR_STEP=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG_FOR_STEP=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: 密钥设置
        env: { BOOT_SIGN_KEY_SECRET_ENV: ${{ secrets.BOOT_SIGN_KEY }} }
        run: |
          KEY_DIR_SETUP="$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb"
          mkdir -p "$KEY_DIR_SETUP"
          if [ -z "$BOOT_SIGN_KEY_SECRET_ENV" ]; then
            openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > "$KEY_DIR_SETUP/testkey_rsa2048.pem"
            echo "BOOT_SIGN_KEY_PATH_FOR_STEP=$KEY_DIR_SETUP/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "$BOOT_SIGN_KEY_SECRET_ENV" > "$KEY_DIR_SETUP/production_key.pem"
            echo "BOOT_SIGN_KEY_PATH_FOR_STEP=$KEY_DIR_SETUP/production_key.pem" >> $GITHUB_ENV
          fi

      - name: 安装仓库
        run: |
          mkdir -p ./git-repo-matrix
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo-matrix/repo
          chmod a+rx ./git-repo-matrix/repo
          echo "REPO_FOR_STEP=$GITHUB_WORKSPACE/./git-repo-matrix/repo" >> $GITHUB_ENV

      - name: 克隆 AnyKernel3 和其他依赖项
        env:
          ANDROID_VER_CLONE: ${{ env.ANDROID_VERSION_MATRIX }}
          KERNEL_VER_CLONE: ${{ env.KERNEL_VERSION_MATRIX }}
          KSU_VARIANT_CLONE: ${{ env.KSU_ACTUAL_VARIANT_ENV }}
          KSU_PATCH_REPO_URL_CLONE: ${{ env.KSU_PATCH_REPO_URL_ENV }}
          KSU_PATCH_REPO_DIR_CLONE: ${{ env.KSU_PATCH_REPO_DIR_ENV }}
        run: |
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "gki-2.0" AnyKernel3
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "gki-${ANDROID_VER_CLONE}-${KERNEL_VER_CLONE}" susfs4ksu || git clone https://gitlab.com/simonpunk/susfs4ksu.git -b main susfs4ksu
          # Common kernel_patches, not KSU variant specific yet
          git clone https://github.com/WildPlusKernel/kernel_patches.git common_kernel_patches 
          # KSU Variant Specific Patches
          if [[ -n "$KSU_PATCH_REPO_URL_CLONE" ]]; then
            echo "Cloning KSU variant specific patches from $KSU_PATCH_REPO_URL_CLONE to $KSU_PATCH_REPO_DIR_CLONE"
            git clone "$KSU_PATCH_REPO_URL_CLONE" "$KSU_PATCH_REPO_DIR_CLONE"
          else
            echo "No specific patch repository URL defined for $KSU_VARIANT_CLONE, skipping clone of variant patches."
            mkdir -p "$KSU_PATCH_REPO_DIR_CLONE" # Create empty dir to prevent later errors if paths expect it
          fi

      - name: 初始化和同步内核源代码
        env:
          CONFIG_PATH_SYNC: ${{ env.CONFIG_ENV_MATRIX }}
          REPO_TOOL_SYNC: ${{ env.REPO_FOR_STEP }}
          MANIFEST_ANDROID_VERSION_SYNC: ${{ env.ANDROID_VERSION_MATRIX }}
          MANIFEST_KERNEL_VERSION_SYNC: ${{ env.KERNEL_VERSION_MATRIX }}
          MANIFEST_OS_PATCH_LEVEL_SYNC: ${{ env.OS_PATCH_LEVEL_MATRIX }}
          MANIFEST_INPUT_KERNEL_TO_BUILD_SYNC: "${{ env.ANDROID_VERSION_MATRIX }}_${{ env.KERNEL_VERSION_MATRIX }}_${{ env.SUB_LEVEL_MATRIX }}_${{ env.OS_PATCH_LEVEL_MATRIX }}_${{ env.REVISION_MATRIX }}"
        run: |
          mkdir -p "${CONFIG_PATH_SYNC}" && cd "${CONFIG_PATH_SYNC}"
          _MANIFEST_BRANCH_BASE_SYNC_STEP="common-${MANIFEST_ANDROID_VERSION_SYNC}-${MANIFEST_KERNEL_VERSION_SYNC}"
          _MANIFEST_BRANCH_SYNC_STEP=""
          if [[ -n "${MANIFEST_OS_PATCH_LEVEL_SYNC}" && "${MANIFEST_OS_PATCH_LEVEL_SYNC}" != "X" && "${MANIFEST_OS_PATCH_LEVEL_SYNC}" != "lts" ]]; then
            _MANIFEST_BRANCH_SYNC_STEP="${_MANIFEST_BRANCH_BASE_SYNC_STEP}-${MANIFEST_OS_PATCH_LEVEL_SYNC}"
          elif [[ "${MANIFEST_INPUT_KERNEL_TO_BUILD_SYNC}" == *"_X_lts_"* || "${MANIFEST_INPUT_KERNEL_TO_BUILD_SYNC}" == *"_lts_"* || "${MANIFEST_OS_PATCH_LEVEL_SYNC}" == "lts" ]]; then
             _MANIFEST_BRANCH_SYNC_STEP="${_MANIFEST_BRANCH_BASE_SYNC_STEP}-lts"
          else
             _MANIFEST_BRANCH_SYNC_STEP="${_MANIFEST_BRANCH_BASE_SYNC_STEP}"
          fi
          echo "Using manifest branch: $_MANIFEST_BRANCH_SYNC_STEP for repo init"
          $REPO_TOOL_SYNC init --depth=1 -u https://android.googlesource.com/kernel/manifest -b $_MANIFEST_BRANCH_SYNC_STEP --repo-rev=v2.16
          DEFAULT_MANIFEST_PATH_SYNC_STEP=".repo/manifests/default.xml"
          if [ ! -f $DEFAULT_MANIFEST_PATH_SYNC_STEP ] && [ -f .repo/manifest.xml ]; then DEFAULT_MANIFEST_PATH_SYNC_STEP=.repo/manifest.xml; fi
          COMMON_PROJECT_REVISION_SYNC=$(grep 'project path="common"' $DEFAULT_MANIFEST_PATH_SYNC_STEP | sed -n 's/.*revision="\([^"]*\)".*/\1/p' | head -n 1)
          if [ -z "$COMMON_PROJECT_REVISION_SYNC" ]; then COMMON_PROJECT_REVISION_SYNC=$_MANIFEST_BRANCH_SYNC_STEP; fi
          REMOTE_COMMON_STATUS_SYNC=$(git ls-remote https://android.googlesource.com/kernel/common $COMMON_PROJECT_REVISION_SYNC)
          if echo "$REMOTE_COMMON_STATUS_SYNC" | grep -q "deprecated/$COMMON_PROJECT_REVISION_SYNC"; then
             sed -i "/project path=\"common\"/s|revision=\"$COMMON_PROJECT_REVISION_SYNC\"|revision=\"deprecated/$COMMON_PROJECT_REVISION_SYNC\"|" $DEFAULT_MANIFEST_PATH_SYNC_STEP || \
             sed -i "/project path=\"kernel\/common\"/s|revision=\"$COMMON_PROJECT_REVISION_SYNC\"|revision=\"deprecated/$COMMON_PROJECT_REVISION_SYNC\"|" $DEFAULT_MANIFEST_PATH_SYNC_STEP
          fi
          $REPO_TOOL_SYNC --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: 添加 KernelSU
        env:
          CONFIG_PATH_KSU: ${{ env.CONFIG_ENV_MATRIX }}
        run: |
          cd "${CONFIG_PATH_KSU}"
          if [[ -n "${{ env.KSU_SETUP_SCRIPT_URL_ENV }}" ]]; then
            echo "Adding KernelSU variant: ${{ env.KSU_ACTUAL_VARIANT_ENV }} using args: ${{ env.KSU_SETUP_SCRIPT_ARGS_ENV }}"
            curl -LSs "${{ env.KSU_SETUP_SCRIPT_URL_ENV }}" | bash -s -- ${{ env.KSU_SETUP_SCRIPT_ARGS_ENV }}
          else
            echo "Skipping KernelSU integration as setup script URL is not defined for variant: ${{ env.KSU_ACTUAL_VARIANT_ENV }}"
          fi
      
      - name: 为 KernelSU 变体安装 SUSFS 补丁
        env:
          CONFIG_PATH_PATCH: ${{ env.CONFIG_ENV_MATRIX }}
          ANDROID_VER_PATCH: ${{ env.ANDROID_VERSION_MATRIX }}
          KERNEL_VER_PATCH: ${{ env.KERNEL_VERSION_MATRIX }}
          OS_PATCH_LEVEL_PATCH: ${{ env.OS_PATCH_LEVEL_MATRIX }}
          KSU_VARIANT_PATCH: ${{ env.KSU_ACTUAL_VARIANT_ENV }}
        run: |
          cd "${CONFIG_PATH_PATCH}"
          if [[ "$KSU_VARIANT_PATCH" == "SukiSU" || "$KSU_VARIANT_PATCH" == "Next" || "$KSU_VARIANT_PATCH" == "MKSU" || "$KSU_VARIANT_PATCH" == "Official" ]]; then
            echo "Applying SUSFS patches into ./common for $KSU_VARIANT_PATCH..."
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${ANDROID_VER_PATCH}-${KERNEL_VER_PATCH}.patch ./common/ 2>/dev/null || echo "WARN: Main SUSFS patch copy failed or not found."
            if [ -d ../susfs4ksu/kernel_patches/fs ]; then cp -r ../susfs4ksu/kernel_patches/fs/* ./common/fs/ 2>/dev/null || echo "WARN: SUSFS fs dir copy failed."; fi
            if [ -d ../susfs4ksu/kernel_patches/include/linux ]; then mkdir -p ./common/include/linux && cp -r ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ 2>/dev/null || echo "WARN: SUSFS include dir copy failed."; fi
            
            KSU_DIR_NAME="KernelSU" # Default
            if [ "$KSU_VARIANT_PATCH" == "Next" ]; then KSU_DIR_NAME="KernelSU-Next"; fi

            if [ -d "./$KSU_DIR_NAME" ]; then
              cd "./$KSU_DIR_NAME"
              if [ "$KSU_VARIANT_PATCH" == "Official" ] || [ "$KSU_VARIANT_PATCH" == "MKSU" ]; then
                if [ -f ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ]; then
                  cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
                  patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || echo "WARN: 10_enable_susfs_for_ksu.patch failed"
                fi
              fi
              if [ "$KSU_VARIANT_PATCH" == "MKSU" ]; then
                if [ -f ../../common_kernel_patches/mksu/mksu_susfs.patch ]; then cp ../../common_kernel_patches/mksu/mksu_susfs.patch ./ && patch -p1 < mksu_susfs.patch || echo "WARN: mksu_susfs.patch failed"; fi
                if [ -f ../../common_kernel_patches/mksu/fix.patch ]; then cp ../../common_kernel_patches/mksu/fix.patch ./ && patch -p1 < fix.patch || echo "WARN: mksu fix.patch failed"; fi
              fi
              if [ "$KSU_VARIANT_PATCH" == "Next" ]; then
                 if [ -f ../../${KSU_PATCH_REPO_DIR_ENV}/next/kernel-patch-susfs-v1.5.7-to-KernelSU-Next.patch ]; then # Adjust path if common_kernel_patches is used for Next
                    cp ../../${KSU_PATCH_REPO_DIR_ENV}/next/kernel-patch-susfs-v1.5.7-to-KernelSU-Next.patch ./
                    patch -p1 --forward --fuzz=3 < kernel-patch-susfs-v1.5.7-to-KernelSU-Next.patch || echo "WARN: Next SUSFS patch failed"
                 fi
              fi
              cd .. # Back to $CONFIG_PATH_PATCH
            else echo "WARN: KSU directory ./$KSU_DIR_NAME not found."; fi
            
            cd ./common
            if [ -f "./50_add_susfs_in_gki-${ANDROID_VER_PATCH}-${KERNEL_VER_PATCH}.patch" ]; then
              patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${ANDROID_VER_PATCH}-${KERNEL_VER_PATCH}.patch || echo "WARN: Main SUSFS patch apply in common failed."
            fi
            FORMATTED_BRANCH_FIX_SUSFS="${ANDROID_VER_PATCH}-${KERNEL_VER_PATCH}-${OS_PATCH_LEVEL_PATCH}"
            if [ "$FORMATTED_BRANCH_FIX_SUSFS" == "android15-6.6-2024-08" ] || [ "$FORMATTED_BRANCH_FIX_SUSFS" == "android15-6.6-2024-09" ]; then
              curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/fix/fix6.6.patch -o fix6.6.patch && patch -p1 < fix6.6.patch || echo "WARN: fix6.6.patch failed"
            fi
          fi

      - name: 应用HOOKS及隐藏补丁 (SukiSU/Next特定)
        env:
          CONFIG_PATH_HOOK: ${{ env.CONFIG_ENV_MATRIX }}
          KSU_VARIANT_HOOK: ${{ env.KSU_ACTUAL_VARIANT_ENV }}
          KSU_PATCH_DIR_HOOK: ${{ env.KSU_PATCH_REPO_DIR_ENV }} # e.g., SukiSU_patch_files or KSUNext_patches_dir
        run: |
          cd "${CONFIG_PATH_HOOK}/common"
          if [ "$KSU_VARIANT_HOOK" == "SukiSU" ]; then
            if [ -f "../../${KSU_PATCH_DIR_HOOK}/hooks/syscall_hooks.patch" ]; then cp ../../${KSU_PATCH_DIR_HOOK}/hooks/syscall_hooks.patch ./ && patch -p1 -F 3 < syscall_hooks.patch || echo "WARN: SukiSU syscall_hooks.patch failed"; fi
            if [ -f "../../${KSU_PATCH_DIR_HOOK}/69_hide_stuff.patch" ]; then cp ../../${KSU_PATCH_DIR_HOOK}/69_hide_stuff.patch ./ && patch -p1 -F 3 < 69_hide_stuff.patch || echo "WARN: SukiSU hide_stuff.patch failed"; fi
          elif [ "$KSU_VARIANT_HOOK" == "Next" ]; then # Assuming Next patches are in common_kernel_patches/next
            if [ -f "../../common_kernel_patches/next/syscall_hooks.patch" ]; then cp ../../common_kernel_patches/next/syscall_hooks.patch ./ && patch -p1 -F 3 < syscall_hooks.patch || echo "WARN: Next syscall_hooks.patch failed"; fi
          fi
      
      - name: 应用ZRAM相关补丁 (SukiSU特定)
        if: github.event.inputs.use_zram == 'true' && env.KSU_ACTUAL_VARIANT_ENV == 'SukiSU'
        env:
          CONFIG_PATH_ZRAM: ${{ env.CONFIG_ENV_MATRIX }}
          KERNEL_VER_ZRAM: ${{ env.KERNEL_VERSION_MATRIX }}
          SUKISU_PATCH_DIR_ZRAM: ${{ env.KSU_PATCH_REPO_DIR_ENV }}
        run: |
          cd "${CONFIG_PATH_ZRAM}/common"
          ZRAM_PATCH_BASE_DIR_ZRAM="../../${SUKISU_PATCH_DIR_ZRAM}/other/zram"
          if [ -d "$ZRAM_PATCH_BASE_DIR_ZRAM" ]; then
            if [ -d "${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k/include/linux" ]; then mkdir -p ./include/linux && cp -r ${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k/include/linux/* ./include/linux/; fi
            if [ -d "${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k/lib" ]; then cp -r ${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k/lib/* ./lib/; fi
            if [ -d "${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k/crypto" ]; then cp -r ${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k/crypto/* ./crypto/; fi
            if [ -d "${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k_oplus" ]; then cp -r ${ZRAM_PATCH_BASE_DIR_ZRAM}/lz4k_oplus ./lib/; fi
            if [ -f "${ZRAM_PATCH_BASE_DIR_ZRAM}/zram_patch/${KERNEL_VER_ZRAM}/lz4kd.patch" ]; then cp ${ZRAM_PATCH_BASE_DIR_ZRAM}/zram_patch/${KERNEL_VER_ZRAM}/lz4kd.patch ./ && patch -p1 -F 3 < lz4kd.patch || echo "WARN: lz4kd.patch failed"; fi
            if [ -f "${ZRAM_PATCH_BASE_DIR_ZRAM}/zram_patch/${KERNEL_VER_ZRAM}/lz4k_oplus.patch" ]; then cp ${ZRAM_PATCH_BASE_DIR_ZRAM}/zram_patch/${KERNEL_VER_ZRAM}/lz4k_oplus.patch ./ && patch -p1 -F 3 < lz4k_oplus.patch || echo "WARN: lz4k_oplus.patch failed"; fi
          else echo "WARN: SukiSU ZRAM patch directory not found: $ZRAM_PATCH_BASE_DIR_ZRAM"; fi

      - name: 应用管理器补丁 (Next/MKSU特定)
        env:
          CONFIG_PATH_MGR: ${{ env.CONFIG_ENV_MATRIX }}
          KSU_VARIANT_MGR: ${{ env.KSU_ACTUAL_VARIANT_ENV }}
          KSU_PATCH_DIR_MGR: ${{ env.KSU_PATCH_REPO_DIR_ENV }}
        run: |
          cd "${CONFIG_PATH_MGR}"
          KSU_MAIN_DIR_MGR="KernelSU" # Default
          if [ "$KSU_VARIANT_MGR" == "Next" ]; then KSU_MAIN_DIR_MGR="KernelSU-Next"; fi

          if [ -d "./$KSU_MAIN_DIR_MGR" ]; then
            cd "./$KSU_MAIN_DIR_MGR"
            MANAGER_PATCH_PATH=""
            if [ "$KSU_VARIANT_MGR" == "Next" ]; then MANAGER_PATCH_PATH="../../${KSU_PATCH_DIR_MGR}/next/manager.patch"; fi # Adjust to common_kernel_patches if needed
            # MKSU manager patch? Example shows none.
            if [[ -n "$MANAGER_PATCH_PATH" && -f "$MANAGER_PATCH_PATH" ]]; then
              cp "$MANAGER_PATCH_PATH" ./manager.patch && patch -p1 --fuzz=3 < manager.patch || echo "WARN: Manager patch failed for $KSU_VARIANT_MGR"
            elif [[ "$KSU_VARIANT_MGR" == "Next" ]]; then echo "WARN: Manager patch not found for Next at $MANAGER_PATCH_PATH"; fi
          fi

      - name: 配置内核编译选项 (defconfig)
        env:
          GKI_DEFCONFIG_FILE_CFG: ${{ env.GKI_DEFCONFIG_PATH_ENV_MATRIX }}
          USE_ZRAM_CFG: ${{ github.event.inputs.use_zram }}
          ANDROID_VER_CFG: ${{ env.ANDROID_VERSION_MATRIX }}
          KERNEL_VER_CFG: ${{ env.KERNEL_VERSION_MATRIX }}
          KSU_VARIANT_CFG: ${{ env.KSU_ACTUAL_VARIANT_ENV }}
          EFFECTIVE_KPM_CFG: ${{ steps.kpm_settings_compile_step.outputs.effective_kpm_value_for_config }}
          CONFIG_DIR_CFG: ${{ env.CONFIG_ENV_MATRIX }}
          FINAL_KERNEL_LOCAL_VERSION_CFG: ${{ steps.generate_kernel_version_strings.outputs.FINAL_KERNEL_LOCAL_VERSION_OUT }}
        run: |
          if [ ! -f "$GKI_DEFCONFIG_FILE_CFG" ]; then echo "::error::Defconfig not found: $GKI_DEFCONFIG_FILE_CFG"; exit 1; fi
          
          # Base KSU and common settings
          declare -a configs_array_cfg=(
            "CONFIG_KSU=y" "CONFIG_TMPFS_XATTR=y" "CONFIG_TMPFS_POSIX_ACL=y"
            "CONFIG_IP_NF_TARGET_TTL=y" "CONFIG_IP6_NF_TARGET_HL=y" "CONFIG_IP6_NF_MATCH_HL=y"
            "CONFIG_TCP_CONG_ADVANCED=y" "CONFIG_TCP_CONG_BBR=y" "CONFIG_NET_SCH_FQ=y"
            "CONFIG_TCP_CONG_BIC=n" "CONFIG_TCP_CONG_WESTWOOD=n" "CONFIG_TCP_CONG_HTCP=n"
          )
          if [[ "$EFFECTIVE_KPM_CFG" == "true" ]]; then configs_array_cfg+=("CONFIG_KPM=y"); else configs_array_cfg+=("CONFIG_KPM=n"); fi
          
          # KSU Variant specific defconfigs
          if [[ "$KSU_VARIANT_CFG" == "SukiSU" || "$KSU_VARIANT_CFG" == "Next" || "$KSU_VARIANT_CFG" == "MKSU" ]]; then
            configs_array_cfg+=("CONFIG_KSU_SUSFS_SUS_SU=n")
            if [[ "$KSU_VARIANT_CFG" == "SukiSU" ]]; then configs_array_cfg+=("CONFIG_KSU_MANUAL_HOOK=y"); fi
            if [[ "$KSU_VARIANT_CFG" == "Next" ]]; then configs_array_cfg+=("CONFIG_KSU_WITH_KPROBES=n"); fi
            
            configs_array_cfg+=(
              "CONFIG_KSU_SUSFS=y" "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" "CONFIG_KSU_SUSFS_SUS_PATH=y"
              "CONFIG_KSU_SUSFS_SUS_MOUNT=y" "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
              "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
              "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
              "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
              "CONFIG_KSU_SUSFS_ENABLE_LOG=y" "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
              "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            )
          fi

          # ZRAM defconfigs
          if [[ "$USE_ZRAM_CFG" == "true" ]]; then
            configs_array_cfg+=("CONFIG_ZSMALLOC=y" "CONFIG_ZRAM=y")
            if [[ "$KERNEL_VER_CFG" == "5.10" ]]; then configs_array_cfg+=("CONFIG_MODULE_SIG=n" "CONFIG_CRYPTO_LZO=y" "CONFIG_ZRAM_DEF_COMP_LZ4KD=y"); fi
            if grep -q "CONFIG_ZSMALLOC=y" "$GKI_DEFCONFIG_FILE_CFG" && grep -q "CONFIG_ZRAM=y" "$GKI_DEFCONFIG_FILE_CFG"; then # Check if base ZRAM/ZSMALLOC are already y
               configs_array_cfg+=("CONFIG_CRYPTO_LZ4HC=y" "CONFIG_CRYPTO_LZ4K=y" "CONFIG_CRYPTO_LZ4KD=y" "CONFIG_CRYPTO_842=y")
               if [[ "$KSU_VARIANT_CFG" == "SukiSU" ]]; then configs_array_cfg+=("CONFIG_CRYPTO_LZ4K_OPLUS=y"); fi # SukiSU specific ZRAM algo
            fi
          fi

          for config_item_cfg in "${configs_array_cfg[@]}"; do
            key_item_cfg=$(echo "$config_item_cfg" | cut -d'=' -f1)
            sed -i "/^${key_item_cfg}=/d" "$GKI_DEFCONFIG_FILE_CFG"
            sed -i "/^# ${key_item_cfg} is not set/d" "$GKI_DEFCONFIG_FILE_CFG"
            echo "$config_item_cfg" >> "$GKI_DEFCONFIG_FILE_CFG"
          done
          # LOCALVERSION settings
          sed -i '/^CONFIG_LOCALVERSION=/d' "$GKI_DEFCONFIG_FILE_CFG"
          echo "CONFIG_LOCALVERSION=\"${FINAL_KERNEL_LOCAL_VERSION_CFG}\"" >> "$GKI_DEFCONFIG_FILE_CFG" # Directly set full LOCALVERSION
          sed -i '/^CONFIG_LOCALVERSION_AUTO=/d' "$GKI_DEFCONFIG_FILE_CFG"
          echo '# CONFIG_LOCALVERSION_AUTO is not set' >> "$GKI_DEFCONFIG_FILE_CFG"
          sort -u "$GKI_DEFCONFIG_FILE_CFG" -o "$GKI_DEFCONFIG_FILE_CFG"
          
          # Build config modifications (check_defconfig removal, ABI, timestamp)
          cd "${GITHUB_WORKSPACE}/${CONFIG_DIR_CFG}"
          sed -i 's/check_defconfig//g' ./common/build.config.gki 2>/dev/null || true
          sed -i 's/check_defconfig//g' ./common/build.config.gki.aarch64 2>/dev/null || true
          sed -i 's/check_defconfig//g' ./common/build.config 2>/dev/null || true
          
          if [ ! -f "./build/build.sh" ]; then # Bazel/Kleaf specific
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel 2>/dev/null || true
            rm -rf ./common/android/abi_gki_protected_exports_*
            if [ -f "./build/kernel/kleaf/impl/stamp.bzl" ]; then sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl; fi
          else # build.sh specific
             sed -i 's/-dirty//' ./common/scripts/setlocalversion 2>/dev/null || true # Remove -dirty if FINAL_KERNEL_LOCAL_VERSION_CFG is not set by user
          fi
          # Timestamp spoofing in mkcompile_h
          if [ -f "./common/scripts/mkcompile_h" ]; then
            perl -pi -e 's{UTS_VERSION=\".*\"}{UTS_VERSION="#1 SMP PREEMPT $(date)"}' ./common/scripts/mkcompile_h # Simpler date, or specific fixed date
          fi
          # Modules fix for ZRAM if needed
          if [[ "$USE_ZRAM_CFG" == "true" ]]; then
            if [ "$ANDROID_VER_CFG" = "android14" ] || [ "$ANDROID_VER_CFG" = "android15" ]; then
              if [ -f "./common/modules.bzl" ]; then sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./common/modules.bzl"; fi
              grep -qxF 'CONFIG_MODULE_SIG_FORCE=n' "$GKI_DEFCONFIG_FILE_CFG" || echo 'CONFIG_MODULE_SIG_FORCE=n' >> "$GKI_DEFCONFIG_FILE_CFG"
            elif [ "$KERNEL_VER_CFG" = "5.10" ] || [ "$KERNEL_VER_CFG" = "5.15" ]; then
              if [ -f "./common/android/gki_aarch64_modules" ]; then echo -n > "./common/android/gki_aarch64_modules"; fi
            fi
            sort -u "$GKI_DEFCONFIG_FILE_CFG" -o "$GKI_DEFCONFIG_FILE_CFG"
          fi

      - name: 校验关键内核配置 (编译前最终检查)
        env:
          GKI_DEFCONFIG_FILE_FINAL_CHECK: ${{ env.GKI_DEFCONFIG_PATH_ENV_MATRIX }}
          USE_ZRAM_FINAL_CHECK: ${{ github.event.inputs.use_zram }}
        run: |
          echo "Final config validation: $GKI_DEFCONFIG_FILE_FINAL_CHECK"
          if [ ! -f "$GKI_DEFCONFIG_FILE_FINAL_CHECK" ]; then echo "::error::Defconfig missing for final check"; exit 1; fi
          if ! grep -q "^CONFIG_KSU=y$" "$GKI_DEFCONFIG_FILE_FINAL_CHECK"; then echo "::warning::CONFIG_KSU not y"; fi
          if [[ "$USE_ZRAM_FINAL_CHECK" == "true" ]] && ! grep -q "^CONFIG_ZRAM=y$" "$GKI_DEFCONFIG_FILE_FINAL_CHECK"; then echo "::error::CONFIG_ZRAM not y despite input"; exit 1; fi
          echo "Final config validation passed."

      - name: Build Kernel with Retry
        uses: nick-fields/retry@v3
        env:
          CONFIG_PATH_BUILD_FINAL: ${{ env.CONFIG_ENV_MATRIX }}
          BAZEL_PROFILE_PATH_FINAL: ${{ github.workspace }}/${{ env.BAZEL_PROFILE_FILENAME }}
          LTO_SETTING_FINAL: ${{ github.event.inputs.lto_override }}
          BAZEL_OPTS_FINAL: ${{ env.BAZEL_OPTIMIZATION_FLAGS }}
        with:
          timeout_minutes: 90
          max_attempts: 2
          retry_on: timeout
          command: |
            set -e; set -x; cd "${CONFIG_PATH_BUILD_FINAL}"
            BUILD_SCRIPT_FINAL="./build/build.sh"
            BAZEL_CACHE_PATH_FINAL="/home/runner/.cache/bazel_disk_cache"; mkdir -p "$BAZEL_CACHE_PATH_FINAL"
            LTO_PREFIX_FINAL=""
            if [[ "$LTO_SETTING_FINAL" == "thin" ]]; then LTO_PREFIX_FINAL="LTO=thin"; elif [[ "$LTO_SETTING_FINAL" == "full" ]]; then LTO_PREFIX_FINAL="LTO=full"; elif [[ "$LTO_SETTING_FINAL" == "none" ]]; then LTO_PREFIX_FINAL="LTO=none"; fi
            if [ -f "$BUILD_SCRIPT_FINAL" ]; then
              echo "Build with build.sh, LTO: ${LTO_SETTING_FINAL:-default}"
              ${LTO_PREFIX_FINAL} SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
              BUILD_CONFIG=common/build.config.gki.aarch64 CC="/usr/bin/ccache clang" /usr/bin/time -v ./build/build.sh || exit 1
            else
              echo "Build with Bazel, LTO: ${LTO_SETTING_FINAL:-default}"
              BAZEL_LTO_ARG_FINAL=""
              if [[ "$LTO_SETTING_FINAL" == "thin" ]]; then BAZEL_LTO_ARG_FINAL="--lto=thin"; elif [[ "$LTO_SETTING_FINAL" == "full" ]]; then BAZEL_LTO_ARG_FINAL="--lto=full"; elif [[ "$LTO_SETTING_FINAL" == "none" ]]; then BAZEL_LTO_ARG_FINAL="--lto=none"; fi
              BAZEL_CMD_FINAL="tools/bazel build --disk_cache=${BAZEL_CACHE_PATH_FINAL} --config=fast ${BAZEL_LTO_ARG_FINAL} --profile=${BAZEL_PROFILE_PATH_FINAL} ${BAZEL_OPTS_FINAL} //common:kernel_aarch64_dist"
              /usr/bin/time -v $BAZEL_CMD_FINAL || exit 1
            fi
            ccache --show-stats
            if [ -f "${BAZEL_PROFILE_PATH_FINAL}" ]; then echo "Bazel profile at: ${BAZEL_PROFILE_PATH_FINAL}"; fi

      - name: 修补 Image 文件 (KPM)
        if: steps.kpm_settings_compile_step.outputs.effective_kpm_value_for_config == 'true' && env.KERNEL_VERSION_MATRIX != '6.6'
        env:
          CONFIG_PATH_KPM_PATCH: ${{ env.CONFIG_ENV_MATRIX }}
          ANDROID_VER_KPM_PATCH: ${{ env.ANDROID_VERSION_MATRIX }}
          KERNEL_VER_KPM_PATCH: ${{ env.KERNEL_VERSION_MATRIX }}
        run: |
          IMAGE_PATH_KPM_STEP=""
          if [ -f "${GITHUB_WORKSPACE}/${CONFIG_PATH_KPM_PATCH}/out/${ANDROID_VER_KPM_PATCH}-${KERNEL_VER_KPM_PATCH}/dist/Image" ]; then
            IMAGE_PATH_KPM_STEP="${GITHUB_WORKSPACE}/${CONFIG_PATH_KPM_PATCH}/out/${ANDROID_VER_KPM_PATCH}-${KERNEL_VER_KPM_PATCH}/dist/Image"
          elif [ -f "${GITHUB_WORKSPACE}/${CONFIG_PATH_KPM_PATCH}/bazel-bin/common/kernel_aarch64/Image" ]; then
            IMAGE_PATH_KPM_STEP="${GITHUB_WORKSPACE}/${CONFIG_PATH_KPM_PATCH}/bazel-bin/common/kernel_aarch64/Image"
          fi
          if [[ -n "$IMAGE_PATH_KPM_STEP" && -f "$IMAGE_PATH_KPM_STEP" ]]; then
            cd "$(dirname $IMAGE_PATH_KPM_STEP)"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_kpm && chmod +x patch_kpm && ./patch_kpm
            if [ -f "oImage" ]; then mv Image Image.orig_kpm; mv oImage Image; echo "KPM patched."; else echo "WARN: KPM patching no oImage."; fi
          else echo "WARN: Image not found for KPM."; fi

      - name: 将内核 Image 复制到 AnyKernel3 目录
        env:
          CONFIG_PATH_AK3: ${{ env.CONFIG_ENV_MATRIX }}
          ANDROID_VER_AK3: ${{ env.ANDROID_VERSION_MATRIX }}
          KERNEL_VER_AK3: ${{ env.KERNEL_VERSION_MATRIX }}
        run: |
          IMAGE_SOURCE_PATH_AK3=""
          if [ -f "${GITHUB_WORKSPACE}/${CONFIG_PATH_AK3}/out/${ANDROID_VER_AK3}-${KERNEL_VER_AK3}/dist/Image" ]; then
            IMAGE_SOURCE_PATH_AK3="${GITHUB_WORKSPACE}/${CONFIG_PATH_AK3}/out/${ANDROID_VER_AK3}-${KERNEL_VER_AK3}/dist/Image"
          elif [ -f "${GITHUB_WORKSPACE}/${CONFIG_PATH_AK3}/bazel-bin/common/kernel_aarch64/Image" ]; then
            IMAGE_SOURCE_PATH_AK3="${GITHUB_WORKSPACE}/${CONFIG_PATH_AK3}/bazel-bin/common/kernel_aarch64/Image"
          fi
          if [ ! -f "$IMAGE_SOURCE_PATH_AK3" ]; then echo "::error::Image not found for AnyKernel3"; exit 1; fi
          if [ ! -d "./AnyKernel3" ]; then echo "::error::AnyKernel3 dir missing"; exit 1; fi
          cp "$IMAGE_SOURCE_PATH_AK3" ./AnyKernel3/Image && echo "Image copied to AnyKernel3."

      - name: 上传 AnyKernel3 刷机包 (Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: |
            ${{ (env.KSU_VERSION_ENV != 'NoVer' && env.KSU_VERSION_ENV != '' && env.KSU_VERSION_ENV != '00000') &&
                format('AnyKernel3_{0}_{1}_{2}-{3}{4}', env.KSU_ACTUAL_VARIANT_ENV, env.KSU_VERSION_ENV, env.KERNEL_VERSION_MATRIX, env.SUB_LEVEL_MATRIX, steps.generate_kernel_version_strings.outputs.ARTIFACT_NAME_SUFFIX_PART_OUT) ||
                format('AnyKernel3_{0}_NoVer_{1}-{2}{3}', env.KSU_ACTUAL_VARIANT_ENV, env.KERNEL_VERSION_MATRIX, env.SUB_LEVEL_MATRIX, steps.generate_kernel_version_strings.outputs.ARTIFACT_NAME_SUFFIX_PART_OUT) }}
          path: ./AnyKernel3
          if-no-files-found: error

      - name: 上传日志文件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.job_name_suffix }}
          path: |
            ${{ env.CCACHE_LOGFILE }}
            ${{ github.workspace }}/${{ env.BAZEL_PROFILE_FILENAME }}
          if-no-files-found: ignore

      - name: 准备 Release 输出信息
        id: prepare_release_info_step
        env:
          KSU_VERSION_INFO: ${{ env.KSU_VERSION_ENV }}
          KERNEL_VER_INFO: ${{ env.KERNEL_VERSION_MATRIX }}
          SUB_LEVEL_INFO: ${{ env.SUB_LEVEL_MATRIX }}
          ARTIFACT_SUFFIX_INFO: ${{ steps.generate_kernel_version_strings.outputs.ARTIFACT_NAME_SUFFIX_PART_OUT }}
          KSU_VARIANT_INFO: ${{ env.KSU_ACTUAL_VARIANT_ENV }}
          CUSTOM_VERSION_SUFFIX_INFO: ${{ github.event.inputs.version_suffix }}
        shell: bash
        run: |
          _ksu_ver="${KSU_VERSION_INFO}"
          _krnl_ver="${KERNEL_VER_INFO}"
          _sub_lvl="${SUB_LEVEL_INFO}"
          _suffix="${ARTIFACT_SUFFIX_INFO}"
          _ksu_var="${KSU_VARIANT_INFO}"
          _base_name_rel="${_ksu_var}"
          _title_rel=""
          _tag_rel=""

          if [[ "$_ksu_ver" != "NoVer" && "$_ksu_ver" =~ ^[0-9]+$ && "$_ksu_ver" != "00000" && "$_ksu_ver" != "10000" ]]; then
            _title_rel="${_base_name_rel}-${_ksu_ver}"
            _tag_rel="${_base_name_rel}-${_ksu_ver}_${_krnl_ver}.${_sub_lvl}${_suffix}"
          else
            _actual_suffix_fb="${_suffix}"
            if [[ -z "$_actual_suffix_fb" && -z "$CUSTOM_VERSION_SUFFIX_INFO" ]]; then
               _actual_suffix_fb="-$(date +%Y%m%d)"
            fi
            _title_rel="${_base_name_rel}-NoVer${_actual_suffix_fb}"
            _tag_rel="${_base_name_rel}-NoVer_${_krnl_ver}.${_sub_lvl}${_actual_suffix_fb}"
          fi
          echo "release_tag_out=$(echo "$_tag_rel" | sed 's/[^a-zA-Z0-9._-]/-/g')" >> "$GITHUB_OUTPUT"
          echo "release_title_out=$_title_rel" >> "$GITHUB_OUTPUT"
          
          _artifact_zip_name=""
           if [[ "$_ksu_ver" != "NoVer" && "$_ksu_ver" =~ ^[0-9]+$ && "$_ksu_ver" != "00000" && "$_ksu_ver" != "10000" ]]; then
            _artifact_zip_name="AnyKernel3_${_ksu_var}_${_ksu_ver}_${_krnl_ver}-${_sub_lvl}${_suffix}.zip"
          else
            _artifact_zip_name="AnyKernel3_${_ksu_var}_NoVer_${_krnl_ver}-${_sub_lvl}${_actual_suffix_fb}.zip"
          fi
          echo "artifact_zip_name_out=$(echo "$_artifact_zip_name" | sed 's/[^a-zA-Z0-9._-]/-/g')" >> "$GITHUB_OUTPUT"

      - name: 创建 Release 并上传刷机包
        if: github.event.inputs.upload_to_release == 'true'
        uses: ncipollo/release-action@v1
        with:
          artifactPath: ./AnyKernel3
          artifactName: ${{ steps.prepare_release_info_step.outputs.artifact_zip_name_out }}
          tag: ${{ steps.prepare_release_info_step.outputs.release_tag_out }}
          name: ${{ steps.prepare_release_info_step.outputs.release_title_out }}
          body: |
            自动构建的内核发行版。

            **内核详情:**
            - Android 版本: `${{ env.ANDROID_VERSION_MATRIX }}`
            - 内核版本: `${{ env.KERNEL_VERSION_MATRIX }}.${{ env.SUB_LEVEL_MATRIX }}`
            - OS 安全补丁级别: `${{ env.OS_PATCH_LEVEL_MATRIX }}`
            - Revision: `${{ env.REVISION_MATRIX }}`
            - KernelSU 变体: `${{ env.KSU_ACTUAL_VARIANT_ENV }}`
            - KernelSU 版本 (计算): `${{ env.KSU_VERSION_ENV }}`
            - 内核名 (LOCALVERSION): `${{ env.KERNEL_VERSION_MATRIX }}.${{ env.SUB_LEVEL_MATRIX }}${{ steps.generate_kernel_version_strings.outputs.FINAL_KERNEL_LOCAL_VERSION_OUT }}`
            - 构建日期: `${{ steps.generate_kernel_version_strings.outputs.CURRENT_BUILD_DATE_FORMATTED_OUT }}`

            **构建选项:**
            - 使用ZRAM扩展算法: `${{ github.event.inputs.use_zram }}`
            - 使用KPM: `${{ env.EFFECTIVE_USE_KPM_FOR_RELEASE }}`
            - LTO 设置: `${{ github.event.inputs.lto_override }}`

            ---
            *构建触发SHA: `${{ github.sha }}`*
            *工作流运行ID: `${{ github.run_id }}`*
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          replacesArtifacts: true